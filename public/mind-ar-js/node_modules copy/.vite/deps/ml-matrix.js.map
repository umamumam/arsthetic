{
  "version": 3,
  "sources": ["../../is-any-array/src/index.js", "../../ml-array-max/lib-es6/index.js", "../../ml-array-min/lib-es6/index.js", "../../ml-array-rescale/lib-es6/index.js", "../../ml-matrix/src/inspect.js", "../../ml-matrix/src/mathOperations.js", "../../ml-matrix/src/util.js", "../../ml-matrix/src/stat.js", "../../ml-matrix/src/matrix.js", "../../ml-matrix/src/views/base.js", "../../ml-matrix/src/views/column.js", "../../ml-matrix/src/views/columnSelection.js", "../../ml-matrix/src/views/flipColumn.js", "../../ml-matrix/src/views/flipRow.js", "../../ml-matrix/src/views/row.js", "../../ml-matrix/src/views/rowSelection.js", "../../ml-matrix/src/views/selection.js", "../../ml-matrix/src/views/sub.js", "../../ml-matrix/src/views/transpose.js", "../../ml-matrix/src/wrap/WrapperMatrix1D.js", "../../ml-matrix/src/wrap/WrapperMatrix2D.js", "../../ml-matrix/src/wrap/wrap.js", "../../ml-matrix/src/dc/lu.js", "../../ml-matrix/src/dc/util.js", "../../ml-matrix/src/dc/qr.js", "../../ml-matrix/src/dc/svd.js", "../../ml-matrix/src/decompositions.js", "../../ml-matrix/src/determinant.js", "../../ml-matrix/src/linearDependencies.js", "../../ml-matrix/src/pseudoInverse.js", "../../ml-matrix/src/covariance.js", "../../ml-matrix/src/correlation.js", "../../ml-matrix/src/dc/evd.js", "../../ml-matrix/src/dc/cholesky.js", "../../ml-matrix/src/dc/nipals.js"],
  "sourcesContent": ["const toString = Object.prototype.toString;\n\n/**\n * Checks if an object is an instance of an Array (array or typed array).\n *\n * @param {any} value - Object to check.\n * @returns {boolean} True if the object is an array.\n */\nexport function isAnyArray(value) {\n  return toString.call(value).endsWith('Array]');\n}\n", "import { isAnyArray } from 'is-any-array';\n\nfunction max(input) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  if (!isAnyArray(input)) {\n    throw new TypeError('input must be an array');\n  }\n\n  if (input.length === 0) {\n    throw new TypeError('input must not be empty');\n  }\n\n  var _options$fromIndex = options.fromIndex,\n      fromIndex = _options$fromIndex === void 0 ? 0 : _options$fromIndex,\n      _options$toIndex = options.toIndex,\n      toIndex = _options$toIndex === void 0 ? input.length : _options$toIndex;\n\n  if (fromIndex < 0 || fromIndex >= input.length || !Number.isInteger(fromIndex)) {\n    throw new Error('fromIndex must be a positive integer smaller than length');\n  }\n\n  if (toIndex <= fromIndex || toIndex > input.length || !Number.isInteger(toIndex)) {\n    throw new Error('toIndex must be an integer greater than fromIndex and at most equal to length');\n  }\n\n  var maxValue = input[fromIndex];\n\n  for (var i = fromIndex + 1; i < toIndex; i++) {\n    if (input[i] > maxValue) maxValue = input[i];\n  }\n\n  return maxValue;\n}\n\nexport { max as default };\n", "import { isAnyArray } from 'is-any-array';\n\nfunction min(input) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  if (!isAnyArray(input)) {\n    throw new TypeError('input must be an array');\n  }\n\n  if (input.length === 0) {\n    throw new TypeError('input must not be empty');\n  }\n\n  var _options$fromIndex = options.fromIndex,\n      fromIndex = _options$fromIndex === void 0 ? 0 : _options$fromIndex,\n      _options$toIndex = options.toIndex,\n      toIndex = _options$toIndex === void 0 ? input.length : _options$toIndex;\n\n  if (fromIndex < 0 || fromIndex >= input.length || !Number.isInteger(fromIndex)) {\n    throw new Error('fromIndex must be a positive integer smaller than length');\n  }\n\n  if (toIndex <= fromIndex || toIndex > input.length || !Number.isInteger(toIndex)) {\n    throw new Error('toIndex must be an integer greater than fromIndex and at most equal to length');\n  }\n\n  var minValue = input[fromIndex];\n\n  for (var i = fromIndex + 1; i < toIndex; i++) {\n    if (input[i] < minValue) minValue = input[i];\n  }\n\n  return minValue;\n}\n\nexport { min as default };\n", "import { isAnyArray } from 'is-any-array';\nimport max from 'ml-array-max';\nimport min from 'ml-array-min';\n\nfunction rescale(input) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  if (!isAnyArray(input)) {\n    throw new TypeError('input must be an array');\n  } else if (input.length === 0) {\n    throw new TypeError('input must not be empty');\n  }\n\n  var output;\n\n  if (options.output !== undefined) {\n    if (!isAnyArray(options.output)) {\n      throw new TypeError('output option must be an array if specified');\n    }\n\n    output = options.output;\n  } else {\n    output = new Array(input.length);\n  }\n\n  var currentMin = min(input);\n  var currentMax = max(input);\n\n  if (currentMin === currentMax) {\n    throw new RangeError('minimum and maximum input values are equal. Cannot rescale a constant array');\n  }\n\n  var _options$min = options.min,\n      minValue = _options$min === void 0 ? options.autoMinMax ? currentMin : 0 : _options$min,\n      _options$max = options.max,\n      maxValue = _options$max === void 0 ? options.autoMinMax ? currentMax : 1 : _options$max;\n\n  if (minValue >= maxValue) {\n    throw new RangeError('min option must be smaller than max option');\n  }\n\n  var factor = (maxValue - minValue) / (currentMax - currentMin);\n\n  for (var i = 0; i < input.length; i++) {\n    output[i] = (input[i] - currentMin) * factor + minValue;\n  }\n\n  return output;\n}\n\nexport { rescale as default };\n", "const indent = ' '.repeat(2);\nconst indentData = ' '.repeat(4);\n\nexport function inspectMatrix() {\n  return inspectMatrixWithOptions(this);\n}\n\nexport function inspectMatrixWithOptions(matrix, options = {}) {\n  const {\n    maxRows = 15,\n    maxColumns = 10,\n    maxNumSize = 8,\n    padMinus = 'auto',\n  } = options;\n  return `${matrix.constructor.name} {\n${indent}[\n${indentData}${inspectData(matrix, maxRows, maxColumns, maxNumSize, padMinus)}\n${indent}]\n${indent}rows: ${matrix.rows}\n${indent}columns: ${matrix.columns}\n}`;\n}\n\nfunction inspectData(matrix, maxRows, maxColumns, maxNumSize, padMinus) {\n  const { rows, columns } = matrix;\n  const maxI = Math.min(rows, maxRows);\n  const maxJ = Math.min(columns, maxColumns);\n  const result = [];\n\n  if (padMinus === 'auto') {\n    padMinus = false;\n    loop: for (let i = 0; i < maxI; i++) {\n      for (let j = 0; j < maxJ; j++) {\n        if (matrix.get(i, j) < 0) {\n          padMinus = true;\n          break loop;\n        }\n      }\n    }\n  }\n\n  for (let i = 0; i < maxI; i++) {\n    let line = [];\n    for (let j = 0; j < maxJ; j++) {\n      line.push(formatNumber(matrix.get(i, j), maxNumSize, padMinus));\n    }\n    result.push(`${line.join(' ')}`);\n  }\n  if (maxJ !== columns) {\n    result[result.length - 1] += ` ... ${columns - maxColumns} more columns`;\n  }\n  if (maxI !== rows) {\n    result.push(`... ${rows - maxRows} more rows`);\n  }\n  return result.join(`\\n${indentData}`);\n}\n\nfunction formatNumber(num, maxNumSize, padMinus) {\n  return (\n    num >= 0 && padMinus\n      ? ` ${formatNumber2(num, maxNumSize - 1)}`\n      : formatNumber2(num, maxNumSize)\n  ).padEnd(maxNumSize);\n}\n\nfunction formatNumber2(num, len) {\n  // small.length numbers should be as is\n  let str = num.toString();\n  if (str.length <= len) return str;\n\n  // (7)'0.00123' is better then (7)'1.23e-2'\n  // (8)'0.000123' is worse then (7)'1.23e-3',\n  let fix = num.toFixed(len);\n  if (fix.length > len) {\n    fix = num.toFixed(Math.max(0, len - (fix.length - len)));\n  }\n  if (\n    fix.length <= len &&\n    !fix.startsWith('0.000') &&\n    !fix.startsWith('-0.000')\n  ) {\n    return fix;\n  }\n\n  // well, if it's still too long the user should've used longer numbers\n  let exp = num.toExponential(len);\n  if (exp.length > len) {\n    exp = num.toExponential(Math.max(0, len - (exp.length - len)));\n  }\n  return exp.slice(0);\n}\n", "export function installMathOperations(AbstractMatrix, Matrix) {\n  AbstractMatrix.prototype.add = function add(value) {\n    if (typeof value === 'number') return this.addS(value);\n    return this.addM(value);\n  };\n\n  AbstractMatrix.prototype.addS = function addS(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) + value);\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.prototype.addM = function addM(matrix) {\n    matrix = Matrix.checkMatrix(matrix);\n    if (this.rows !== matrix.rows ||\n      this.columns !== matrix.columns) {\n      throw new RangeError('Matrices dimensions must be equal');\n    }\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) + matrix.get(i, j));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.add = function add(matrix, value) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.add(value);\n  };\n\n  AbstractMatrix.prototype.sub = function sub(value) {\n    if (typeof value === 'number') return this.subS(value);\n    return this.subM(value);\n  };\n\n  AbstractMatrix.prototype.subS = function subS(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) - value);\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.prototype.subM = function subM(matrix) {\n    matrix = Matrix.checkMatrix(matrix);\n    if (this.rows !== matrix.rows ||\n      this.columns !== matrix.columns) {\n      throw new RangeError('Matrices dimensions must be equal');\n    }\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) - matrix.get(i, j));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.sub = function sub(matrix, value) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.sub(value);\n  };\n  AbstractMatrix.prototype.subtract = AbstractMatrix.prototype.sub;\n  AbstractMatrix.prototype.subtractS = AbstractMatrix.prototype.subS;\n  AbstractMatrix.prototype.subtractM = AbstractMatrix.prototype.subM;\n  AbstractMatrix.subtract = AbstractMatrix.sub;\n\n  AbstractMatrix.prototype.mul = function mul(value) {\n    if (typeof value === 'number') return this.mulS(value);\n    return this.mulM(value);\n  };\n\n  AbstractMatrix.prototype.mulS = function mulS(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) * value);\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.prototype.mulM = function mulM(matrix) {\n    matrix = Matrix.checkMatrix(matrix);\n    if (this.rows !== matrix.rows ||\n      this.columns !== matrix.columns) {\n      throw new RangeError('Matrices dimensions must be equal');\n    }\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) * matrix.get(i, j));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.mul = function mul(matrix, value) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.mul(value);\n  };\n  AbstractMatrix.prototype.multiply = AbstractMatrix.prototype.mul;\n  AbstractMatrix.prototype.multiplyS = AbstractMatrix.prototype.mulS;\n  AbstractMatrix.prototype.multiplyM = AbstractMatrix.prototype.mulM;\n  AbstractMatrix.multiply = AbstractMatrix.mul;\n\n  AbstractMatrix.prototype.div = function div(value) {\n    if (typeof value === 'number') return this.divS(value);\n    return this.divM(value);\n  };\n\n  AbstractMatrix.prototype.divS = function divS(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) / value);\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.prototype.divM = function divM(matrix) {\n    matrix = Matrix.checkMatrix(matrix);\n    if (this.rows !== matrix.rows ||\n      this.columns !== matrix.columns) {\n      throw new RangeError('Matrices dimensions must be equal');\n    }\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) / matrix.get(i, j));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.div = function div(matrix, value) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.div(value);\n  };\n  AbstractMatrix.prototype.divide = AbstractMatrix.prototype.div;\n  AbstractMatrix.prototype.divideS = AbstractMatrix.prototype.divS;\n  AbstractMatrix.prototype.divideM = AbstractMatrix.prototype.divM;\n  AbstractMatrix.divide = AbstractMatrix.div;\n\n  AbstractMatrix.prototype.mod = function mod(value) {\n    if (typeof value === 'number') return this.modS(value);\n    return this.modM(value);\n  };\n\n  AbstractMatrix.prototype.modS = function modS(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) % value);\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.prototype.modM = function modM(matrix) {\n    matrix = Matrix.checkMatrix(matrix);\n    if (this.rows !== matrix.rows ||\n      this.columns !== matrix.columns) {\n      throw new RangeError('Matrices dimensions must be equal');\n    }\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) % matrix.get(i, j));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.mod = function mod(matrix, value) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.mod(value);\n  };\n  AbstractMatrix.prototype.modulus = AbstractMatrix.prototype.mod;\n  AbstractMatrix.prototype.modulusS = AbstractMatrix.prototype.modS;\n  AbstractMatrix.prototype.modulusM = AbstractMatrix.prototype.modM;\n  AbstractMatrix.modulus = AbstractMatrix.mod;\n\n  AbstractMatrix.prototype.and = function and(value) {\n    if (typeof value === 'number') return this.andS(value);\n    return this.andM(value);\n  };\n\n  AbstractMatrix.prototype.andS = function andS(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) & value);\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.prototype.andM = function andM(matrix) {\n    matrix = Matrix.checkMatrix(matrix);\n    if (this.rows !== matrix.rows ||\n      this.columns !== matrix.columns) {\n      throw new RangeError('Matrices dimensions must be equal');\n    }\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) & matrix.get(i, j));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.and = function and(matrix, value) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.and(value);\n  };\n\n  AbstractMatrix.prototype.or = function or(value) {\n    if (typeof value === 'number') return this.orS(value);\n    return this.orM(value);\n  };\n\n  AbstractMatrix.prototype.orS = function orS(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) | value);\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.prototype.orM = function orM(matrix) {\n    matrix = Matrix.checkMatrix(matrix);\n    if (this.rows !== matrix.rows ||\n      this.columns !== matrix.columns) {\n      throw new RangeError('Matrices dimensions must be equal');\n    }\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) | matrix.get(i, j));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.or = function or(matrix, value) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.or(value);\n  };\n\n  AbstractMatrix.prototype.xor = function xor(value) {\n    if (typeof value === 'number') return this.xorS(value);\n    return this.xorM(value);\n  };\n\n  AbstractMatrix.prototype.xorS = function xorS(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) ^ value);\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.prototype.xorM = function xorM(matrix) {\n    matrix = Matrix.checkMatrix(matrix);\n    if (this.rows !== matrix.rows ||\n      this.columns !== matrix.columns) {\n      throw new RangeError('Matrices dimensions must be equal');\n    }\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) ^ matrix.get(i, j));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.xor = function xor(matrix, value) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.xor(value);\n  };\n\n  AbstractMatrix.prototype.leftShift = function leftShift(value) {\n    if (typeof value === 'number') return this.leftShiftS(value);\n    return this.leftShiftM(value);\n  };\n\n  AbstractMatrix.prototype.leftShiftS = function leftShiftS(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) << value);\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.prototype.leftShiftM = function leftShiftM(matrix) {\n    matrix = Matrix.checkMatrix(matrix);\n    if (this.rows !== matrix.rows ||\n      this.columns !== matrix.columns) {\n      throw new RangeError('Matrices dimensions must be equal');\n    }\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) << matrix.get(i, j));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.leftShift = function leftShift(matrix, value) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.leftShift(value);\n  };\n\n  AbstractMatrix.prototype.signPropagatingRightShift = function signPropagatingRightShift(value) {\n    if (typeof value === 'number') return this.signPropagatingRightShiftS(value);\n    return this.signPropagatingRightShiftM(value);\n  };\n\n  AbstractMatrix.prototype.signPropagatingRightShiftS = function signPropagatingRightShiftS(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) >> value);\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.prototype.signPropagatingRightShiftM = function signPropagatingRightShiftM(matrix) {\n    matrix = Matrix.checkMatrix(matrix);\n    if (this.rows !== matrix.rows ||\n      this.columns !== matrix.columns) {\n      throw new RangeError('Matrices dimensions must be equal');\n    }\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) >> matrix.get(i, j));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.signPropagatingRightShift = function signPropagatingRightShift(matrix, value) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.signPropagatingRightShift(value);\n  };\n\n  AbstractMatrix.prototype.rightShift = function rightShift(value) {\n    if (typeof value === 'number') return this.rightShiftS(value);\n    return this.rightShiftM(value);\n  };\n\n  AbstractMatrix.prototype.rightShiftS = function rightShiftS(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) >>> value);\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.prototype.rightShiftM = function rightShiftM(matrix) {\n    matrix = Matrix.checkMatrix(matrix);\n    if (this.rows !== matrix.rows ||\n      this.columns !== matrix.columns) {\n      throw new RangeError('Matrices dimensions must be equal');\n    }\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) >>> matrix.get(i, j));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.rightShift = function rightShift(matrix, value) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.rightShift(value);\n  };\n  AbstractMatrix.prototype.zeroFillRightShift = AbstractMatrix.prototype.rightShift;\n  AbstractMatrix.prototype.zeroFillRightShiftS = AbstractMatrix.prototype.rightShiftS;\n  AbstractMatrix.prototype.zeroFillRightShiftM = AbstractMatrix.prototype.rightShiftM;\n  AbstractMatrix.zeroFillRightShift = AbstractMatrix.rightShift;\n\n  AbstractMatrix.prototype.not = function not() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, ~(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.not = function not(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.not();\n  };\n\n  AbstractMatrix.prototype.abs = function abs() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.abs(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.abs = function abs(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.abs();\n  };\n\n  AbstractMatrix.prototype.acos = function acos() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.acos(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.acos = function acos(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.acos();\n  };\n\n  AbstractMatrix.prototype.acosh = function acosh() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.acosh(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.acosh = function acosh(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.acosh();\n  };\n\n  AbstractMatrix.prototype.asin = function asin() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.asin(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.asin = function asin(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.asin();\n  };\n\n  AbstractMatrix.prototype.asinh = function asinh() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.asinh(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.asinh = function asinh(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.asinh();\n  };\n\n  AbstractMatrix.prototype.atan = function atan() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.atan(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.atan = function atan(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.atan();\n  };\n\n  AbstractMatrix.prototype.atanh = function atanh() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.atanh(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.atanh = function atanh(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.atanh();\n  };\n\n  AbstractMatrix.prototype.cbrt = function cbrt() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.cbrt(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.cbrt = function cbrt(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.cbrt();\n  };\n\n  AbstractMatrix.prototype.ceil = function ceil() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.ceil(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.ceil = function ceil(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.ceil();\n  };\n\n  AbstractMatrix.prototype.clz32 = function clz32() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.clz32(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.clz32 = function clz32(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.clz32();\n  };\n\n  AbstractMatrix.prototype.cos = function cos() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.cos(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.cos = function cos(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.cos();\n  };\n\n  AbstractMatrix.prototype.cosh = function cosh() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.cosh(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.cosh = function cosh(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.cosh();\n  };\n\n  AbstractMatrix.prototype.exp = function exp() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.exp(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.exp = function exp(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.exp();\n  };\n\n  AbstractMatrix.prototype.expm1 = function expm1() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.expm1(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.expm1 = function expm1(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.expm1();\n  };\n\n  AbstractMatrix.prototype.floor = function floor() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.floor(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.floor = function floor(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.floor();\n  };\n\n  AbstractMatrix.prototype.fround = function fround() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.fround(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.fround = function fround(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.fround();\n  };\n\n  AbstractMatrix.prototype.log = function log() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.log(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.log = function log(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.log();\n  };\n\n  AbstractMatrix.prototype.log1p = function log1p() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.log1p(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.log1p = function log1p(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.log1p();\n  };\n\n  AbstractMatrix.prototype.log10 = function log10() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.log10(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.log10 = function log10(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.log10();\n  };\n\n  AbstractMatrix.prototype.log2 = function log2() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.log2(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.log2 = function log2(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.log2();\n  };\n\n  AbstractMatrix.prototype.round = function round() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.round(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.round = function round(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.round();\n  };\n\n  AbstractMatrix.prototype.sign = function sign() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.sign(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.sign = function sign(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.sign();\n  };\n\n  AbstractMatrix.prototype.sin = function sin() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.sin(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.sin = function sin(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.sin();\n  };\n\n  AbstractMatrix.prototype.sinh = function sinh() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.sinh(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.sinh = function sinh(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.sinh();\n  };\n\n  AbstractMatrix.prototype.sqrt = function sqrt() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.sqrt(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.sqrt = function sqrt(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.sqrt();\n  };\n\n  AbstractMatrix.prototype.tan = function tan() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.tan(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.tan = function tan(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.tan();\n  };\n\n  AbstractMatrix.prototype.tanh = function tanh() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.tanh(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.tanh = function tanh(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.tanh();\n  };\n\n  AbstractMatrix.prototype.trunc = function trunc() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.trunc(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.trunc = function trunc(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.trunc();\n  };\n\n  AbstractMatrix.pow = function pow(matrix, arg0) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.pow(arg0);\n  };\n\n  AbstractMatrix.prototype.pow = function pow(value) {\n    if (typeof value === 'number') return this.powS(value);\n    return this.powM(value);\n  };\n\n  AbstractMatrix.prototype.powS = function powS(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.pow(this.get(i, j), value));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.prototype.powM = function powM(matrix) {\n    matrix = Matrix.checkMatrix(matrix);\n    if (this.rows !== matrix.rows ||\n      this.columns !== matrix.columns) {\n      throw new RangeError('Matrices dimensions must be equal');\n    }\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.pow(this.get(i, j), matrix.get(i, j)));\n      }\n    }\n    return this;\n  };\n}\n", "import { isAnyArray } from 'is-any-array';\n\n/**\n * @private\n * Check that a row index is not out of bounds\n * @param {Matrix} matrix\n * @param {number} index\n * @param {boolean} [outer]\n */\nexport function checkRowIndex(matrix, index, outer) {\n  let max = outer ? matrix.rows : matrix.rows - 1;\n  if (index < 0 || index > max) {\n    throw new RangeError('Row index out of range');\n  }\n}\n\n/**\n * @private\n * Check that a column index is not out of bounds\n * @param {Matrix} matrix\n * @param {number} index\n * @param {boolean} [outer]\n */\nexport function checkColumnIndex(matrix, index, outer) {\n  let max = outer ? matrix.columns : matrix.columns - 1;\n  if (index < 0 || index > max) {\n    throw new RangeError('Column index out of range');\n  }\n}\n\n/**\n * @private\n * Check that the provided vector is an array with the right length\n * @param {Matrix} matrix\n * @param {Array|Matrix} vector\n * @return {Array}\n * @throws {RangeError}\n */\nexport function checkRowVector(matrix, vector) {\n  if (vector.to1DArray) {\n    vector = vector.to1DArray();\n  }\n  if (vector.length !== matrix.columns) {\n    throw new RangeError(\n      'vector size must be the same as the number of columns',\n    );\n  }\n  return vector;\n}\n\n/**\n * @private\n * Check that the provided vector is an array with the right length\n * @param {Matrix} matrix\n * @param {Array|Matrix} vector\n * @return {Array}\n * @throws {RangeError}\n */\nexport function checkColumnVector(matrix, vector) {\n  if (vector.to1DArray) {\n    vector = vector.to1DArray();\n  }\n  if (vector.length !== matrix.rows) {\n    throw new RangeError('vector size must be the same as the number of rows');\n  }\n  return vector;\n}\n\nexport function checkRowIndices(matrix, rowIndices) {\n  if (!isAnyArray(rowIndices)) {\n    throw new TypeError('row indices must be an array');\n  }\n\n  for (let i = 0; i < rowIndices.length; i++) {\n    if (rowIndices[i] < 0 || rowIndices[i] >= matrix.rows) {\n      throw new RangeError('row indices are out of range');\n    }\n  }\n}\n\nexport function checkColumnIndices(matrix, columnIndices) {\n  if (!isAnyArray(columnIndices)) {\n    throw new TypeError('column indices must be an array');\n  }\n\n  for (let i = 0; i < columnIndices.length; i++) {\n    if (columnIndices[i] < 0 || columnIndices[i] >= matrix.columns) {\n      throw new RangeError('column indices are out of range');\n    }\n  }\n}\n\nexport function checkRange(matrix, startRow, endRow, startColumn, endColumn) {\n  if (arguments.length !== 5) {\n    throw new RangeError('expected 4 arguments');\n  }\n  checkNumber('startRow', startRow);\n  checkNumber('endRow', endRow);\n  checkNumber('startColumn', startColumn);\n  checkNumber('endColumn', endColumn);\n  if (\n    startRow > endRow ||\n    startColumn > endColumn ||\n    startRow < 0 ||\n    startRow >= matrix.rows ||\n    endRow < 0 ||\n    endRow >= matrix.rows ||\n    startColumn < 0 ||\n    startColumn >= matrix.columns ||\n    endColumn < 0 ||\n    endColumn >= matrix.columns\n  ) {\n    throw new RangeError('Submatrix indices are out of range');\n  }\n}\n\nexport function newArray(length, value = 0) {\n  let array = [];\n  for (let i = 0; i < length; i++) {\n    array.push(value);\n  }\n  return array;\n}\n\nfunction checkNumber(name, value) {\n  if (typeof value !== 'number') {\n    throw new TypeError(`${name} must be a number`);\n  }\n}\n\nexport function checkNonEmpty(matrix) {\n  if (matrix.isEmpty()) {\n    throw new Error('Empty matrix has no elements to index');\n  }\n}\n", "import { newArray } from './util';\n\nexport function sumByRow(matrix) {\n  let sum = newArray(matrix.rows);\n  for (let i = 0; i < matrix.rows; ++i) {\n    for (let j = 0; j < matrix.columns; ++j) {\n      sum[i] += matrix.get(i, j);\n    }\n  }\n  return sum;\n}\n\nexport function sumByColumn(matrix) {\n  let sum = newArray(matrix.columns);\n  for (let i = 0; i < matrix.rows; ++i) {\n    for (let j = 0; j < matrix.columns; ++j) {\n      sum[j] += matrix.get(i, j);\n    }\n  }\n  return sum;\n}\n\nexport function sumAll(matrix) {\n  let v = 0;\n  for (let i = 0; i < matrix.rows; i++) {\n    for (let j = 0; j < matrix.columns; j++) {\n      v += matrix.get(i, j);\n    }\n  }\n  return v;\n}\n\nexport function productByRow(matrix) {\n  let sum = newArray(matrix.rows, 1);\n  for (let i = 0; i < matrix.rows; ++i) {\n    for (let j = 0; j < matrix.columns; ++j) {\n      sum[i] *= matrix.get(i, j);\n    }\n  }\n  return sum;\n}\n\nexport function productByColumn(matrix) {\n  let sum = newArray(matrix.columns, 1);\n  for (let i = 0; i < matrix.rows; ++i) {\n    for (let j = 0; j < matrix.columns; ++j) {\n      sum[j] *= matrix.get(i, j);\n    }\n  }\n  return sum;\n}\n\nexport function productAll(matrix) {\n  let v = 1;\n  for (let i = 0; i < matrix.rows; i++) {\n    for (let j = 0; j < matrix.columns; j++) {\n      v *= matrix.get(i, j);\n    }\n  }\n  return v;\n}\n\nexport function varianceByRow(matrix, unbiased, mean) {\n  const rows = matrix.rows;\n  const cols = matrix.columns;\n  const variance = [];\n\n  for (let i = 0; i < rows; i++) {\n    let sum1 = 0;\n    let sum2 = 0;\n    let x = 0;\n    for (let j = 0; j < cols; j++) {\n      x = matrix.get(i, j) - mean[i];\n      sum1 += x;\n      sum2 += x * x;\n    }\n    if (unbiased) {\n      variance.push((sum2 - (sum1 * sum1) / cols) / (cols - 1));\n    } else {\n      variance.push((sum2 - (sum1 * sum1) / cols) / cols);\n    }\n  }\n  return variance;\n}\n\nexport function varianceByColumn(matrix, unbiased, mean) {\n  const rows = matrix.rows;\n  const cols = matrix.columns;\n  const variance = [];\n\n  for (let j = 0; j < cols; j++) {\n    let sum1 = 0;\n    let sum2 = 0;\n    let x = 0;\n    for (let i = 0; i < rows; i++) {\n      x = matrix.get(i, j) - mean[j];\n      sum1 += x;\n      sum2 += x * x;\n    }\n    if (unbiased) {\n      variance.push((sum2 - (sum1 * sum1) / rows) / (rows - 1));\n    } else {\n      variance.push((sum2 - (sum1 * sum1) / rows) / rows);\n    }\n  }\n  return variance;\n}\n\nexport function varianceAll(matrix, unbiased, mean) {\n  const rows = matrix.rows;\n  const cols = matrix.columns;\n  const size = rows * cols;\n\n  let sum1 = 0;\n  let sum2 = 0;\n  let x = 0;\n  for (let i = 0; i < rows; i++) {\n    for (let j = 0; j < cols; j++) {\n      x = matrix.get(i, j) - mean;\n      sum1 += x;\n      sum2 += x * x;\n    }\n  }\n  if (unbiased) {\n    return (sum2 - (sum1 * sum1) / size) / (size - 1);\n  } else {\n    return (sum2 - (sum1 * sum1) / size) / size;\n  }\n}\n\nexport function centerByRow(matrix, mean) {\n  for (let i = 0; i < matrix.rows; i++) {\n    for (let j = 0; j < matrix.columns; j++) {\n      matrix.set(i, j, matrix.get(i, j) - mean[i]);\n    }\n  }\n}\n\nexport function centerByColumn(matrix, mean) {\n  for (let i = 0; i < matrix.rows; i++) {\n    for (let j = 0; j < matrix.columns; j++) {\n      matrix.set(i, j, matrix.get(i, j) - mean[j]);\n    }\n  }\n}\n\nexport function centerAll(matrix, mean) {\n  for (let i = 0; i < matrix.rows; i++) {\n    for (let j = 0; j < matrix.columns; j++) {\n      matrix.set(i, j, matrix.get(i, j) - mean);\n    }\n  }\n}\n\nexport function getScaleByRow(matrix) {\n  const scale = [];\n  for (let i = 0; i < matrix.rows; i++) {\n    let sum = 0;\n    for (let j = 0; j < matrix.columns; j++) {\n      sum += Math.pow(matrix.get(i, j), 2) / (matrix.columns - 1);\n    }\n    scale.push(Math.sqrt(sum));\n  }\n  return scale;\n}\n\nexport function scaleByRow(matrix, scale) {\n  for (let i = 0; i < matrix.rows; i++) {\n    for (let j = 0; j < matrix.columns; j++) {\n      matrix.set(i, j, matrix.get(i, j) / scale[i]);\n    }\n  }\n}\n\nexport function getScaleByColumn(matrix) {\n  const scale = [];\n  for (let j = 0; j < matrix.columns; j++) {\n    let sum = 0;\n    for (let i = 0; i < matrix.rows; i++) {\n      sum += Math.pow(matrix.get(i, j), 2) / (matrix.rows - 1);\n    }\n    scale.push(Math.sqrt(sum));\n  }\n  return scale;\n}\n\nexport function scaleByColumn(matrix, scale) {\n  for (let i = 0; i < matrix.rows; i++) {\n    for (let j = 0; j < matrix.columns; j++) {\n      matrix.set(i, j, matrix.get(i, j) / scale[j]);\n    }\n  }\n}\n\nexport function getScaleAll(matrix) {\n  const divider = matrix.size - 1;\n  let sum = 0;\n  for (let j = 0; j < matrix.columns; j++) {\n    for (let i = 0; i < matrix.rows; i++) {\n      sum += Math.pow(matrix.get(i, j), 2) / divider;\n    }\n  }\n  return Math.sqrt(sum);\n}\n\nexport function scaleAll(matrix, scale) {\n  for (let i = 0; i < matrix.rows; i++) {\n    for (let j = 0; j < matrix.columns; j++) {\n      matrix.set(i, j, matrix.get(i, j) / scale);\n    }\n  }\n}\n", "import { isAnyArray } from 'is-any-array';\nimport rescale from 'ml-array-rescale';\n\nimport { inspectMatrix, inspectMatrixWithOptions } from './inspect';\nimport { installMathOperations } from './mathOperations';\nimport {\n  sumByRow,\n  sumByColumn,\n  sumAll,\n  productByRow,\n  productByColumn,\n  productAll,\n  varianceByRow,\n  varianceByColumn,\n  varianceAll,\n  centerByRow,\n  centerByColumn,\n  centerAll,\n  scaleByRow,\n  scaleByColumn,\n  scaleAll,\n  getScaleByRow,\n  getScaleByColumn,\n  getScaleAll,\n} from './stat';\nimport {\n  checkRowVector,\n  checkRowIndex,\n  checkColumnIndex,\n  checkColumnVector,\n  checkRange,\n  checkNonEmpty,\n  checkRowIndices,\n  checkColumnIndices,\n} from './util';\n\nexport class AbstractMatrix {\n  static from1DArray(newRows, newColumns, newData) {\n    let length = newRows * newColumns;\n    if (length !== newData.length) {\n      throw new RangeError('data length does not match given dimensions');\n    }\n    let newMatrix = new Matrix(newRows, newColumns);\n    for (let row = 0; row < newRows; row++) {\n      for (let column = 0; column < newColumns; column++) {\n        newMatrix.set(row, column, newData[row * newColumns + column]);\n      }\n    }\n    return newMatrix;\n  }\n\n  static rowVector(newData) {\n    let vector = new Matrix(1, newData.length);\n    for (let i = 0; i < newData.length; i++) {\n      vector.set(0, i, newData[i]);\n    }\n    return vector;\n  }\n\n  static columnVector(newData) {\n    let vector = new Matrix(newData.length, 1);\n    for (let i = 0; i < newData.length; i++) {\n      vector.set(i, 0, newData[i]);\n    }\n    return vector;\n  }\n\n  static zeros(rows, columns) {\n    return new Matrix(rows, columns);\n  }\n\n  static ones(rows, columns) {\n    return new Matrix(rows, columns).fill(1);\n  }\n\n  static rand(rows, columns, options = {}) {\n    if (typeof options !== 'object') {\n      throw new TypeError('options must be an object');\n    }\n    const { random = Math.random } = options;\n    let matrix = new Matrix(rows, columns);\n    for (let i = 0; i < rows; i++) {\n      for (let j = 0; j < columns; j++) {\n        matrix.set(i, j, random());\n      }\n    }\n    return matrix;\n  }\n\n  static randInt(rows, columns, options = {}) {\n    if (typeof options !== 'object') {\n      throw new TypeError('options must be an object');\n    }\n    const { min = 0, max = 1000, random = Math.random } = options;\n    if (!Number.isInteger(min)) throw new TypeError('min must be an integer');\n    if (!Number.isInteger(max)) throw new TypeError('max must be an integer');\n    if (min >= max) throw new RangeError('min must be smaller than max');\n    let interval = max - min;\n    let matrix = new Matrix(rows, columns);\n    for (let i = 0; i < rows; i++) {\n      for (let j = 0; j < columns; j++) {\n        let value = min + Math.round(random() * interval);\n        matrix.set(i, j, value);\n      }\n    }\n    return matrix;\n  }\n\n  static eye(rows, columns, value) {\n    if (columns === undefined) columns = rows;\n    if (value === undefined) value = 1;\n    let min = Math.min(rows, columns);\n    let matrix = this.zeros(rows, columns);\n    for (let i = 0; i < min; i++) {\n      matrix.set(i, i, value);\n    }\n    return matrix;\n  }\n\n  static diag(data, rows, columns) {\n    let l = data.length;\n    if (rows === undefined) rows = l;\n    if (columns === undefined) columns = rows;\n    let min = Math.min(l, rows, columns);\n    let matrix = this.zeros(rows, columns);\n    for (let i = 0; i < min; i++) {\n      matrix.set(i, i, data[i]);\n    }\n    return matrix;\n  }\n\n  static min(matrix1, matrix2) {\n    matrix1 = this.checkMatrix(matrix1);\n    matrix2 = this.checkMatrix(matrix2);\n    let rows = matrix1.rows;\n    let columns = matrix1.columns;\n    let result = new Matrix(rows, columns);\n    for (let i = 0; i < rows; i++) {\n      for (let j = 0; j < columns; j++) {\n        result.set(i, j, Math.min(matrix1.get(i, j), matrix2.get(i, j)));\n      }\n    }\n    return result;\n  }\n\n  static max(matrix1, matrix2) {\n    matrix1 = this.checkMatrix(matrix1);\n    matrix2 = this.checkMatrix(matrix2);\n    let rows = matrix1.rows;\n    let columns = matrix1.columns;\n    let result = new this(rows, columns);\n    for (let i = 0; i < rows; i++) {\n      for (let j = 0; j < columns; j++) {\n        result.set(i, j, Math.max(matrix1.get(i, j), matrix2.get(i, j)));\n      }\n    }\n    return result;\n  }\n\n  static checkMatrix(value) {\n    return AbstractMatrix.isMatrix(value) ? value : new Matrix(value);\n  }\n\n  static isMatrix(value) {\n    return value != null && value.klass === 'Matrix';\n  }\n\n  get size() {\n    return this.rows * this.columns;\n  }\n\n  apply(callback) {\n    if (typeof callback !== 'function') {\n      throw new TypeError('callback must be a function');\n    }\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        callback.call(this, i, j);\n      }\n    }\n    return this;\n  }\n\n  to1DArray() {\n    let array = [];\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        array.push(this.get(i, j));\n      }\n    }\n    return array;\n  }\n\n  to2DArray() {\n    let copy = [];\n    for (let i = 0; i < this.rows; i++) {\n      copy.push([]);\n      for (let j = 0; j < this.columns; j++) {\n        copy[i].push(this.get(i, j));\n      }\n    }\n    return copy;\n  }\n\n  toJSON() {\n    return this.to2DArray();\n  }\n\n  isRowVector() {\n    return this.rows === 1;\n  }\n\n  isColumnVector() {\n    return this.columns === 1;\n  }\n\n  isVector() {\n    return this.rows === 1 || this.columns === 1;\n  }\n\n  isSquare() {\n    return this.rows === this.columns;\n  }\n\n  isEmpty() {\n    return this.rows === 0 || this.columns === 0;\n  }\n\n  isSymmetric() {\n    if (this.isSquare()) {\n      for (let i = 0; i < this.rows; i++) {\n        for (let j = 0; j <= i; j++) {\n          if (this.get(i, j) !== this.get(j, i)) {\n            return false;\n          }\n        }\n      }\n      return true;\n    }\n    return false;\n  }\n\n  isEchelonForm() {\n    let i = 0;\n    let j = 0;\n    let previousColumn = -1;\n    let isEchelonForm = true;\n    let checked = false;\n    while (i < this.rows && isEchelonForm) {\n      j = 0;\n      checked = false;\n      while (j < this.columns && checked === false) {\n        if (this.get(i, j) === 0) {\n          j++;\n        } else if (this.get(i, j) === 1 && j > previousColumn) {\n          checked = true;\n          previousColumn = j;\n        } else {\n          isEchelonForm = false;\n          checked = true;\n        }\n      }\n      i++;\n    }\n    return isEchelonForm;\n  }\n\n  isReducedEchelonForm() {\n    let i = 0;\n    let j = 0;\n    let previousColumn = -1;\n    let isReducedEchelonForm = true;\n    let checked = false;\n    while (i < this.rows && isReducedEchelonForm) {\n      j = 0;\n      checked = false;\n      while (j < this.columns && checked === false) {\n        if (this.get(i, j) === 0) {\n          j++;\n        } else if (this.get(i, j) === 1 && j > previousColumn) {\n          checked = true;\n          previousColumn = j;\n        } else {\n          isReducedEchelonForm = false;\n          checked = true;\n        }\n      }\n      for (let k = j + 1; k < this.rows; k++) {\n        if (this.get(i, k) !== 0) {\n          isReducedEchelonForm = false;\n        }\n      }\n      i++;\n    }\n    return isReducedEchelonForm;\n  }\n\n  echelonForm() {\n    let result = this.clone();\n    let h = 0;\n    let k = 0;\n    while (h < result.rows && k < result.columns) {\n      let iMax = h;\n      for (let i = h; i < result.rows; i++) {\n        if (result.get(i, k) > result.get(iMax, k)) {\n          iMax = i;\n        }\n      }\n      if (result.get(iMax, k) === 0) {\n        k++;\n      } else {\n        result.swapRows(h, iMax);\n        let tmp = result.get(h, k);\n        for (let j = k; j < result.columns; j++) {\n          result.set(h, j, result.get(h, j) / tmp);\n        }\n        for (let i = h + 1; i < result.rows; i++) {\n          let factor = result.get(i, k) / result.get(h, k);\n          result.set(i, k, 0);\n          for (let j = k + 1; j < result.columns; j++) {\n            result.set(i, j, result.get(i, j) - result.get(h, j) * factor);\n          }\n        }\n        h++;\n        k++;\n      }\n    }\n    return result;\n  }\n\n  reducedEchelonForm() {\n    let result = this.echelonForm();\n    let m = result.columns;\n    let n = result.rows;\n    let h = n - 1;\n    while (h >= 0) {\n      if (result.maxRow(h) === 0) {\n        h--;\n      } else {\n        let p = 0;\n        let pivot = false;\n        while (p < n && pivot === false) {\n          if (result.get(h, p) === 1) {\n            pivot = true;\n          } else {\n            p++;\n          }\n        }\n        for (let i = 0; i < h; i++) {\n          let factor = result.get(i, p);\n          for (let j = p; j < m; j++) {\n            let tmp = result.get(i, j) - factor * result.get(h, j);\n            result.set(i, j, tmp);\n          }\n        }\n        h--;\n      }\n    }\n    return result;\n  }\n\n  set() {\n    throw new Error('set method is unimplemented');\n  }\n\n  get() {\n    throw new Error('get method is unimplemented');\n  }\n\n  repeat(options = {}) {\n    if (typeof options !== 'object') {\n      throw new TypeError('options must be an object');\n    }\n    const { rows = 1, columns = 1 } = options;\n    if (!Number.isInteger(rows) || rows <= 0) {\n      throw new TypeError('rows must be a positive integer');\n    }\n    if (!Number.isInteger(columns) || columns <= 0) {\n      throw new TypeError('columns must be a positive integer');\n    }\n    let matrix = new Matrix(this.rows * rows, this.columns * columns);\n    for (let i = 0; i < rows; i++) {\n      for (let j = 0; j < columns; j++) {\n        matrix.setSubMatrix(this, this.rows * i, this.columns * j);\n      }\n    }\n    return matrix;\n  }\n\n  fill(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, value);\n      }\n    }\n    return this;\n  }\n\n  neg() {\n    return this.mulS(-1);\n  }\n\n  getRow(index) {\n    checkRowIndex(this, index);\n    let row = [];\n    for (let i = 0; i < this.columns; i++) {\n      row.push(this.get(index, i));\n    }\n    return row;\n  }\n\n  getRowVector(index) {\n    return Matrix.rowVector(this.getRow(index));\n  }\n\n  setRow(index, array) {\n    checkRowIndex(this, index);\n    array = checkRowVector(this, array);\n    for (let i = 0; i < this.columns; i++) {\n      this.set(index, i, array[i]);\n    }\n    return this;\n  }\n\n  swapRows(row1, row2) {\n    checkRowIndex(this, row1);\n    checkRowIndex(this, row2);\n    for (let i = 0; i < this.columns; i++) {\n      let temp = this.get(row1, i);\n      this.set(row1, i, this.get(row2, i));\n      this.set(row2, i, temp);\n    }\n    return this;\n  }\n\n  getColumn(index) {\n    checkColumnIndex(this, index);\n    let column = [];\n    for (let i = 0; i < this.rows; i++) {\n      column.push(this.get(i, index));\n    }\n    return column;\n  }\n\n  getColumnVector(index) {\n    return Matrix.columnVector(this.getColumn(index));\n  }\n\n  setColumn(index, array) {\n    checkColumnIndex(this, index);\n    array = checkColumnVector(this, array);\n    for (let i = 0; i < this.rows; i++) {\n      this.set(i, index, array[i]);\n    }\n    return this;\n  }\n\n  swapColumns(column1, column2) {\n    checkColumnIndex(this, column1);\n    checkColumnIndex(this, column2);\n    for (let i = 0; i < this.rows; i++) {\n      let temp = this.get(i, column1);\n      this.set(i, column1, this.get(i, column2));\n      this.set(i, column2, temp);\n    }\n    return this;\n  }\n\n  addRowVector(vector) {\n    vector = checkRowVector(this, vector);\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) + vector[j]);\n      }\n    }\n    return this;\n  }\n\n  subRowVector(vector) {\n    vector = checkRowVector(this, vector);\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) - vector[j]);\n      }\n    }\n    return this;\n  }\n\n  mulRowVector(vector) {\n    vector = checkRowVector(this, vector);\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) * vector[j]);\n      }\n    }\n    return this;\n  }\n\n  divRowVector(vector) {\n    vector = checkRowVector(this, vector);\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) / vector[j]);\n      }\n    }\n    return this;\n  }\n\n  addColumnVector(vector) {\n    vector = checkColumnVector(this, vector);\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) + vector[i]);\n      }\n    }\n    return this;\n  }\n\n  subColumnVector(vector) {\n    vector = checkColumnVector(this, vector);\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) - vector[i]);\n      }\n    }\n    return this;\n  }\n\n  mulColumnVector(vector) {\n    vector = checkColumnVector(this, vector);\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) * vector[i]);\n      }\n    }\n    return this;\n  }\n\n  divColumnVector(vector) {\n    vector = checkColumnVector(this, vector);\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) / vector[i]);\n      }\n    }\n    return this;\n  }\n\n  mulRow(index, value) {\n    checkRowIndex(this, index);\n    for (let i = 0; i < this.columns; i++) {\n      this.set(index, i, this.get(index, i) * value);\n    }\n    return this;\n  }\n\n  mulColumn(index, value) {\n    checkColumnIndex(this, index);\n    for (let i = 0; i < this.rows; i++) {\n      this.set(i, index, this.get(i, index) * value);\n    }\n    return this;\n  }\n\n  max(by) {\n    if (this.isEmpty()) {\n      return NaN;\n    }\n    switch (by) {\n      case 'row': {\n        const max = new Array(this.rows).fill(Number.NEGATIVE_INFINITY);\n        for (let row = 0; row < this.rows; row++) {\n          for (let column = 0; column < this.columns; column++) {\n            if (this.get(row, column) > max[row]) {\n              max[row] = this.get(row, column);\n            }\n          }\n        }\n        return max;\n      }\n      case 'column': {\n        const max = new Array(this.columns).fill(Number.NEGATIVE_INFINITY);\n        for (let row = 0; row < this.rows; row++) {\n          for (let column = 0; column < this.columns; column++) {\n            if (this.get(row, column) > max[column]) {\n              max[column] = this.get(row, column);\n            }\n          }\n        }\n        return max;\n      }\n      case undefined: {\n        let max = this.get(0, 0);\n        for (let row = 0; row < this.rows; row++) {\n          for (let column = 0; column < this.columns; column++) {\n            if (this.get(row, column) > max) {\n              max = this.get(row, column);\n            }\n          }\n        }\n        return max;\n      }\n      default:\n        throw new Error(`invalid option: ${by}`);\n    }\n  }\n\n  maxIndex() {\n    checkNonEmpty(this);\n    let v = this.get(0, 0);\n    let idx = [0, 0];\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        if (this.get(i, j) > v) {\n          v = this.get(i, j);\n          idx[0] = i;\n          idx[1] = j;\n        }\n      }\n    }\n    return idx;\n  }\n\n  min(by) {\n    if (this.isEmpty()) {\n      return NaN;\n    }\n\n    switch (by) {\n      case 'row': {\n        const min = new Array(this.rows).fill(Number.POSITIVE_INFINITY);\n        for (let row = 0; row < this.rows; row++) {\n          for (let column = 0; column < this.columns; column++) {\n            if (this.get(row, column) < min[row]) {\n              min[row] = this.get(row, column);\n            }\n          }\n        }\n        return min;\n      }\n      case 'column': {\n        const min = new Array(this.columns).fill(Number.POSITIVE_INFINITY);\n        for (let row = 0; row < this.rows; row++) {\n          for (let column = 0; column < this.columns; column++) {\n            if (this.get(row, column) < min[column]) {\n              min[column] = this.get(row, column);\n            }\n          }\n        }\n        return min;\n      }\n      case undefined: {\n        let min = this.get(0, 0);\n        for (let row = 0; row < this.rows; row++) {\n          for (let column = 0; column < this.columns; column++) {\n            if (this.get(row, column) < min) {\n              min = this.get(row, column);\n            }\n          }\n        }\n        return min;\n      }\n      default:\n        throw new Error(`invalid option: ${by}`);\n    }\n  }\n\n  minIndex() {\n    checkNonEmpty(this);\n    let v = this.get(0, 0);\n    let idx = [0, 0];\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        if (this.get(i, j) < v) {\n          v = this.get(i, j);\n          idx[0] = i;\n          idx[1] = j;\n        }\n      }\n    }\n    return idx;\n  }\n\n  maxRow(row) {\n    checkRowIndex(this, row);\n    if (this.isEmpty()) {\n      return NaN;\n    }\n    let v = this.get(row, 0);\n    for (let i = 1; i < this.columns; i++) {\n      if (this.get(row, i) > v) {\n        v = this.get(row, i);\n      }\n    }\n    return v;\n  }\n\n  maxRowIndex(row) {\n    checkRowIndex(this, row);\n    checkNonEmpty(this);\n    let v = this.get(row, 0);\n    let idx = [row, 0];\n    for (let i = 1; i < this.columns; i++) {\n      if (this.get(row, i) > v) {\n        v = this.get(row, i);\n        idx[1] = i;\n      }\n    }\n    return idx;\n  }\n\n  minRow(row) {\n    checkRowIndex(this, row);\n    if (this.isEmpty()) {\n      return NaN;\n    }\n    let v = this.get(row, 0);\n    for (let i = 1; i < this.columns; i++) {\n      if (this.get(row, i) < v) {\n        v = this.get(row, i);\n      }\n    }\n    return v;\n  }\n\n  minRowIndex(row) {\n    checkRowIndex(this, row);\n    checkNonEmpty(this);\n    let v = this.get(row, 0);\n    let idx = [row, 0];\n    for (let i = 1; i < this.columns; i++) {\n      if (this.get(row, i) < v) {\n        v = this.get(row, i);\n        idx[1] = i;\n      }\n    }\n    return idx;\n  }\n\n  maxColumn(column) {\n    checkColumnIndex(this, column);\n    if (this.isEmpty()) {\n      return NaN;\n    }\n    let v = this.get(0, column);\n    for (let i = 1; i < this.rows; i++) {\n      if (this.get(i, column) > v) {\n        v = this.get(i, column);\n      }\n    }\n    return v;\n  }\n\n  maxColumnIndex(column) {\n    checkColumnIndex(this, column);\n    checkNonEmpty(this);\n    let v = this.get(0, column);\n    let idx = [0, column];\n    for (let i = 1; i < this.rows; i++) {\n      if (this.get(i, column) > v) {\n        v = this.get(i, column);\n        idx[0] = i;\n      }\n    }\n    return idx;\n  }\n\n  minColumn(column) {\n    checkColumnIndex(this, column);\n    if (this.isEmpty()) {\n      return NaN;\n    }\n    let v = this.get(0, column);\n    for (let i = 1; i < this.rows; i++) {\n      if (this.get(i, column) < v) {\n        v = this.get(i, column);\n      }\n    }\n    return v;\n  }\n\n  minColumnIndex(column) {\n    checkColumnIndex(this, column);\n    checkNonEmpty(this);\n    let v = this.get(0, column);\n    let idx = [0, column];\n    for (let i = 1; i < this.rows; i++) {\n      if (this.get(i, column) < v) {\n        v = this.get(i, column);\n        idx[0] = i;\n      }\n    }\n    return idx;\n  }\n\n  diag() {\n    let min = Math.min(this.rows, this.columns);\n    let diag = [];\n    for (let i = 0; i < min; i++) {\n      diag.push(this.get(i, i));\n    }\n    return diag;\n  }\n\n  norm(type = 'frobenius') {\n    let result = 0;\n    if (type === 'max') {\n      return this.max();\n    } else if (type === 'frobenius') {\n      for (let i = 0; i < this.rows; i++) {\n        for (let j = 0; j < this.columns; j++) {\n          result = result + this.get(i, j) * this.get(i, j);\n        }\n      }\n      return Math.sqrt(result);\n    } else {\n      throw new RangeError(`unknown norm type: ${type}`);\n    }\n  }\n\n  cumulativeSum() {\n    let sum = 0;\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        sum += this.get(i, j);\n        this.set(i, j, sum);\n      }\n    }\n    return this;\n  }\n\n  dot(vector2) {\n    if (AbstractMatrix.isMatrix(vector2)) vector2 = vector2.to1DArray();\n    let vector1 = this.to1DArray();\n    if (vector1.length !== vector2.length) {\n      throw new RangeError('vectors do not have the same size');\n    }\n    let dot = 0;\n    for (let i = 0; i < vector1.length; i++) {\n      dot += vector1[i] * vector2[i];\n    }\n    return dot;\n  }\n\n  mmul(other) {\n    other = Matrix.checkMatrix(other);\n\n    let m = this.rows;\n    let n = this.columns;\n    let p = other.columns;\n\n    let result = new Matrix(m, p);\n\n    let Bcolj = new Float64Array(n);\n    for (let j = 0; j < p; j++) {\n      for (let k = 0; k < n; k++) {\n        Bcolj[k] = other.get(k, j);\n      }\n\n      for (let i = 0; i < m; i++) {\n        let s = 0;\n        for (let k = 0; k < n; k++) {\n          s += this.get(i, k) * Bcolj[k];\n        }\n\n        result.set(i, j, s);\n      }\n    }\n    return result;\n  }\n\n  strassen2x2(other) {\n    other = Matrix.checkMatrix(other);\n    let result = new Matrix(2, 2);\n    const a11 = this.get(0, 0);\n    const b11 = other.get(0, 0);\n    const a12 = this.get(0, 1);\n    const b12 = other.get(0, 1);\n    const a21 = this.get(1, 0);\n    const b21 = other.get(1, 0);\n    const a22 = this.get(1, 1);\n    const b22 = other.get(1, 1);\n\n    // Compute intermediate values.\n    const m1 = (a11 + a22) * (b11 + b22);\n    const m2 = (a21 + a22) * b11;\n    const m3 = a11 * (b12 - b22);\n    const m4 = a22 * (b21 - b11);\n    const m5 = (a11 + a12) * b22;\n    const m6 = (a21 - a11) * (b11 + b12);\n    const m7 = (a12 - a22) * (b21 + b22);\n\n    // Combine intermediate values into the output.\n    const c00 = m1 + m4 - m5 + m7;\n    const c01 = m3 + m5;\n    const c10 = m2 + m4;\n    const c11 = m1 - m2 + m3 + m6;\n\n    result.set(0, 0, c00);\n    result.set(0, 1, c01);\n    result.set(1, 0, c10);\n    result.set(1, 1, c11);\n    return result;\n  }\n\n  strassen3x3(other) {\n    other = Matrix.checkMatrix(other);\n    let result = new Matrix(3, 3);\n\n    const a00 = this.get(0, 0);\n    const a01 = this.get(0, 1);\n    const a02 = this.get(0, 2);\n    const a10 = this.get(1, 0);\n    const a11 = this.get(1, 1);\n    const a12 = this.get(1, 2);\n    const a20 = this.get(2, 0);\n    const a21 = this.get(2, 1);\n    const a22 = this.get(2, 2);\n\n    const b00 = other.get(0, 0);\n    const b01 = other.get(0, 1);\n    const b02 = other.get(0, 2);\n    const b10 = other.get(1, 0);\n    const b11 = other.get(1, 1);\n    const b12 = other.get(1, 2);\n    const b20 = other.get(2, 0);\n    const b21 = other.get(2, 1);\n    const b22 = other.get(2, 2);\n\n    const m1 = (a00 + a01 + a02 - a10 - a11 - a21 - a22) * b11;\n    const m2 = (a00 - a10) * (-b01 + b11);\n    const m3 = a11 * (-b00 + b01 + b10 - b11 - b12 - b20 + b22);\n    const m4 = (-a00 + a10 + a11) * (b00 - b01 + b11);\n    const m5 = (a10 + a11) * (-b00 + b01);\n    const m6 = a00 * b00;\n    const m7 = (-a00 + a20 + a21) * (b00 - b02 + b12);\n    const m8 = (-a00 + a20) * (b02 - b12);\n    const m9 = (a20 + a21) * (-b00 + b02);\n    const m10 = (a00 + a01 + a02 - a11 - a12 - a20 - a21) * b12;\n    const m11 = a21 * (-b00 + b02 + b10 - b11 - b12 - b20 + b21);\n    const m12 = (-a02 + a21 + a22) * (b11 + b20 - b21);\n    const m13 = (a02 - a22) * (b11 - b21);\n    const m14 = a02 * b20;\n    const m15 = (a21 + a22) * (-b20 + b21);\n    const m16 = (-a02 + a11 + a12) * (b12 + b20 - b22);\n    const m17 = (a02 - a12) * (b12 - b22);\n    const m18 = (a11 + a12) * (-b20 + b22);\n    const m19 = a01 * b10;\n    const m20 = a12 * b21;\n    const m21 = a10 * b02;\n    const m22 = a20 * b01;\n    const m23 = a22 * b22;\n\n    const c00 = m6 + m14 + m19;\n    const c01 = m1 + m4 + m5 + m6 + m12 + m14 + m15;\n    const c02 = m6 + m7 + m9 + m10 + m14 + m16 + m18;\n    const c10 = m2 + m3 + m4 + m6 + m14 + m16 + m17;\n    const c11 = m2 + m4 + m5 + m6 + m20;\n    const c12 = m14 + m16 + m17 + m18 + m21;\n    const c20 = m6 + m7 + m8 + m11 + m12 + m13 + m14;\n    const c21 = m12 + m13 + m14 + m15 + m22;\n    const c22 = m6 + m7 + m8 + m9 + m23;\n\n    result.set(0, 0, c00);\n    result.set(0, 1, c01);\n    result.set(0, 2, c02);\n    result.set(1, 0, c10);\n    result.set(1, 1, c11);\n    result.set(1, 2, c12);\n    result.set(2, 0, c20);\n    result.set(2, 1, c21);\n    result.set(2, 2, c22);\n    return result;\n  }\n\n  mmulStrassen(y) {\n    y = Matrix.checkMatrix(y);\n    let x = this.clone();\n    let r1 = x.rows;\n    let c1 = x.columns;\n    let r2 = y.rows;\n    let c2 = y.columns;\n    if (c1 !== r2) {\n      // eslint-disable-next-line no-console\n      console.warn(\n        `Multiplying ${r1} x ${c1} and ${r2} x ${c2} matrix: dimensions do not match.`,\n      );\n    }\n\n    // Put a matrix into the top left of a matrix of zeros.\n    // `rows` and `cols` are the dimensions of the output matrix.\n    function embed(mat, rows, cols) {\n      let r = mat.rows;\n      let c = mat.columns;\n      if (r === rows && c === cols) {\n        return mat;\n      } else {\n        let resultat = AbstractMatrix.zeros(rows, cols);\n        resultat = resultat.setSubMatrix(mat, 0, 0);\n        return resultat;\n      }\n    }\n\n    // Make sure both matrices are the same size.\n    // This is exclusively for simplicity:\n    // this algorithm can be implemented with matrices of different sizes.\n\n    let r = Math.max(r1, r2);\n    let c = Math.max(c1, c2);\n    x = embed(x, r, c);\n    y = embed(y, r, c);\n\n    // Our recursive multiplication function.\n    function blockMult(a, b, rows, cols) {\n      // For small matrices, resort to naive multiplication.\n      if (rows <= 512 || cols <= 512) {\n        return a.mmul(b); // a is equivalent to this\n      }\n\n      // Apply dynamic padding.\n      if (rows % 2 === 1 && cols % 2 === 1) {\n        a = embed(a, rows + 1, cols + 1);\n        b = embed(b, rows + 1, cols + 1);\n      } else if (rows % 2 === 1) {\n        a = embed(a, rows + 1, cols);\n        b = embed(b, rows + 1, cols);\n      } else if (cols % 2 === 1) {\n        a = embed(a, rows, cols + 1);\n        b = embed(b, rows, cols + 1);\n      }\n\n      let halfRows = parseInt(a.rows / 2, 10);\n      let halfCols = parseInt(a.columns / 2, 10);\n      // Subdivide input matrices.\n      let a11 = a.subMatrix(0, halfRows - 1, 0, halfCols - 1);\n      let b11 = b.subMatrix(0, halfRows - 1, 0, halfCols - 1);\n\n      let a12 = a.subMatrix(0, halfRows - 1, halfCols, a.columns - 1);\n      let b12 = b.subMatrix(0, halfRows - 1, halfCols, b.columns - 1);\n\n      let a21 = a.subMatrix(halfRows, a.rows - 1, 0, halfCols - 1);\n      let b21 = b.subMatrix(halfRows, b.rows - 1, 0, halfCols - 1);\n\n      let a22 = a.subMatrix(halfRows, a.rows - 1, halfCols, a.columns - 1);\n      let b22 = b.subMatrix(halfRows, b.rows - 1, halfCols, b.columns - 1);\n\n      // Compute intermediate values.\n      let m1 = blockMult(\n        AbstractMatrix.add(a11, a22),\n        AbstractMatrix.add(b11, b22),\n        halfRows,\n        halfCols,\n      );\n      let m2 = blockMult(AbstractMatrix.add(a21, a22), b11, halfRows, halfCols);\n      let m3 = blockMult(a11, AbstractMatrix.sub(b12, b22), halfRows, halfCols);\n      let m4 = blockMult(a22, AbstractMatrix.sub(b21, b11), halfRows, halfCols);\n      let m5 = blockMult(AbstractMatrix.add(a11, a12), b22, halfRows, halfCols);\n      let m6 = blockMult(\n        AbstractMatrix.sub(a21, a11),\n        AbstractMatrix.add(b11, b12),\n        halfRows,\n        halfCols,\n      );\n      let m7 = blockMult(\n        AbstractMatrix.sub(a12, a22),\n        AbstractMatrix.add(b21, b22),\n        halfRows,\n        halfCols,\n      );\n\n      // Combine intermediate values into the output.\n      let c11 = AbstractMatrix.add(m1, m4);\n      c11.sub(m5);\n      c11.add(m7);\n      let c12 = AbstractMatrix.add(m3, m5);\n      let c21 = AbstractMatrix.add(m2, m4);\n      let c22 = AbstractMatrix.sub(m1, m2);\n      c22.add(m3);\n      c22.add(m6);\n\n      // Crop output to the desired size (undo dynamic padding).\n      let resultat = AbstractMatrix.zeros(2 * c11.rows, 2 * c11.columns);\n      resultat = resultat.setSubMatrix(c11, 0, 0);\n      resultat = resultat.setSubMatrix(c12, c11.rows, 0);\n      resultat = resultat.setSubMatrix(c21, 0, c11.columns);\n      resultat = resultat.setSubMatrix(c22, c11.rows, c11.columns);\n      return resultat.subMatrix(0, rows - 1, 0, cols - 1);\n    }\n\n    return blockMult(x, y, r, c);\n  }\n\n  scaleRows(options = {}) {\n    if (typeof options !== 'object') {\n      throw new TypeError('options must be an object');\n    }\n    const { min = 0, max = 1 } = options;\n    if (!Number.isFinite(min)) throw new TypeError('min must be a number');\n    if (!Number.isFinite(max)) throw new TypeError('max must be a number');\n    if (min >= max) throw new RangeError('min must be smaller than max');\n    let newMatrix = new Matrix(this.rows, this.columns);\n    for (let i = 0; i < this.rows; i++) {\n      const row = this.getRow(i);\n      if (row.length > 0) {\n        rescale(row, { min, max, output: row });\n      }\n      newMatrix.setRow(i, row);\n    }\n    return newMatrix;\n  }\n\n  scaleColumns(options = {}) {\n    if (typeof options !== 'object') {\n      throw new TypeError('options must be an object');\n    }\n    const { min = 0, max = 1 } = options;\n    if (!Number.isFinite(min)) throw new TypeError('min must be a number');\n    if (!Number.isFinite(max)) throw new TypeError('max must be a number');\n    if (min >= max) throw new RangeError('min must be smaller than max');\n    let newMatrix = new Matrix(this.rows, this.columns);\n    for (let i = 0; i < this.columns; i++) {\n      const column = this.getColumn(i);\n      if (column.length) {\n        rescale(column, {\n          min: min,\n          max: max,\n          output: column,\n        });\n      }\n      newMatrix.setColumn(i, column);\n    }\n    return newMatrix;\n  }\n\n  flipRows() {\n    const middle = Math.ceil(this.columns / 2);\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < middle; j++) {\n        let first = this.get(i, j);\n        let last = this.get(i, this.columns - 1 - j);\n        this.set(i, j, last);\n        this.set(i, this.columns - 1 - j, first);\n      }\n    }\n    return this;\n  }\n\n  flipColumns() {\n    const middle = Math.ceil(this.rows / 2);\n    for (let j = 0; j < this.columns; j++) {\n      for (let i = 0; i < middle; i++) {\n        let first = this.get(i, j);\n        let last = this.get(this.rows - 1 - i, j);\n        this.set(i, j, last);\n        this.set(this.rows - 1 - i, j, first);\n      }\n    }\n    return this;\n  }\n\n  kroneckerProduct(other) {\n    other = Matrix.checkMatrix(other);\n\n    let m = this.rows;\n    let n = this.columns;\n    let p = other.rows;\n    let q = other.columns;\n\n    let result = new Matrix(m * p, n * q);\n    for (let i = 0; i < m; i++) {\n      for (let j = 0; j < n; j++) {\n        for (let k = 0; k < p; k++) {\n          for (let l = 0; l < q; l++) {\n            result.set(p * i + k, q * j + l, this.get(i, j) * other.get(k, l));\n          }\n        }\n      }\n    }\n    return result;\n  }\n\n  kroneckerSum(other) {\n    other = Matrix.checkMatrix(other);\n    if (!this.isSquare() || !other.isSquare()) {\n      throw new Error('Kronecker Sum needs two Square Matrices');\n    }\n    let m = this.rows;\n    let n = other.rows;\n    let AxI = this.kroneckerProduct(Matrix.eye(n, n));\n    let IxB = Matrix.eye(m, m).kroneckerProduct(other);\n    return AxI.add(IxB);\n  }\n\n  transpose() {\n    let result = new Matrix(this.columns, this.rows);\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        result.set(j, i, this.get(i, j));\n      }\n    }\n    return result;\n  }\n\n  sortRows(compareFunction = compareNumbers) {\n    for (let i = 0; i < this.rows; i++) {\n      this.setRow(i, this.getRow(i).sort(compareFunction));\n    }\n    return this;\n  }\n\n  sortColumns(compareFunction = compareNumbers) {\n    for (let i = 0; i < this.columns; i++) {\n      this.setColumn(i, this.getColumn(i).sort(compareFunction));\n    }\n    return this;\n  }\n\n  subMatrix(startRow, endRow, startColumn, endColumn) {\n    checkRange(this, startRow, endRow, startColumn, endColumn);\n    let newMatrix = new Matrix(\n      endRow - startRow + 1,\n      endColumn - startColumn + 1,\n    );\n    for (let i = startRow; i <= endRow; i++) {\n      for (let j = startColumn; j <= endColumn; j++) {\n        newMatrix.set(i - startRow, j - startColumn, this.get(i, j));\n      }\n    }\n    return newMatrix;\n  }\n\n  subMatrixRow(indices, startColumn, endColumn) {\n    if (startColumn === undefined) startColumn = 0;\n    if (endColumn === undefined) endColumn = this.columns - 1;\n    if (\n      startColumn > endColumn ||\n      startColumn < 0 ||\n      startColumn >= this.columns ||\n      endColumn < 0 ||\n      endColumn >= this.columns\n    ) {\n      throw new RangeError('Argument out of range');\n    }\n\n    let newMatrix = new Matrix(indices.length, endColumn - startColumn + 1);\n    for (let i = 0; i < indices.length; i++) {\n      for (let j = startColumn; j <= endColumn; j++) {\n        if (indices[i] < 0 || indices[i] >= this.rows) {\n          throw new RangeError(`Row index out of range: ${indices[i]}`);\n        }\n        newMatrix.set(i, j - startColumn, this.get(indices[i], j));\n      }\n    }\n    return newMatrix;\n  }\n\n  subMatrixColumn(indices, startRow, endRow) {\n    if (startRow === undefined) startRow = 0;\n    if (endRow === undefined) endRow = this.rows - 1;\n    if (\n      startRow > endRow ||\n      startRow < 0 ||\n      startRow >= this.rows ||\n      endRow < 0 ||\n      endRow >= this.rows\n    ) {\n      throw new RangeError('Argument out of range');\n    }\n\n    let newMatrix = new Matrix(endRow - startRow + 1, indices.length);\n    for (let i = 0; i < indices.length; i++) {\n      for (let j = startRow; j <= endRow; j++) {\n        if (indices[i] < 0 || indices[i] >= this.columns) {\n          throw new RangeError(`Column index out of range: ${indices[i]}`);\n        }\n        newMatrix.set(j - startRow, i, this.get(j, indices[i]));\n      }\n    }\n    return newMatrix;\n  }\n\n  setSubMatrix(matrix, startRow, startColumn) {\n    matrix = Matrix.checkMatrix(matrix);\n    if (matrix.isEmpty()) {\n      return this;\n    }\n    let endRow = startRow + matrix.rows - 1;\n    let endColumn = startColumn + matrix.columns - 1;\n    checkRange(this, startRow, endRow, startColumn, endColumn);\n    for (let i = 0; i < matrix.rows; i++) {\n      for (let j = 0; j < matrix.columns; j++) {\n        this.set(startRow + i, startColumn + j, matrix.get(i, j));\n      }\n    }\n    return this;\n  }\n\n  selection(rowIndices, columnIndices) {\n    checkRowIndices(this, rowIndices);\n    checkColumnIndices(this, columnIndices);\n    let newMatrix = new Matrix(rowIndices.length, columnIndices.length);\n    for (let i = 0; i < rowIndices.length; i++) {\n      let rowIndex = rowIndices[i];\n      for (let j = 0; j < columnIndices.length; j++) {\n        let columnIndex = columnIndices[j];\n        newMatrix.set(i, j, this.get(rowIndex, columnIndex));\n      }\n    }\n    return newMatrix;\n  }\n\n  trace() {\n    let min = Math.min(this.rows, this.columns);\n    let trace = 0;\n    for (let i = 0; i < min; i++) {\n      trace += this.get(i, i);\n    }\n    return trace;\n  }\n\n  clone() {\n    let newMatrix = new Matrix(this.rows, this.columns);\n    for (let row = 0; row < this.rows; row++) {\n      for (let column = 0; column < this.columns; column++) {\n        newMatrix.set(row, column, this.get(row, column));\n      }\n    }\n    return newMatrix;\n  }\n\n  sum(by) {\n    switch (by) {\n      case 'row':\n        return sumByRow(this);\n      case 'column':\n        return sumByColumn(this);\n      case undefined:\n        return sumAll(this);\n      default:\n        throw new Error(`invalid option: ${by}`);\n    }\n  }\n\n  product(by) {\n    switch (by) {\n      case 'row':\n        return productByRow(this);\n      case 'column':\n        return productByColumn(this);\n      case undefined:\n        return productAll(this);\n      default:\n        throw new Error(`invalid option: ${by}`);\n    }\n  }\n\n  mean(by) {\n    const sum = this.sum(by);\n    switch (by) {\n      case 'row': {\n        for (let i = 0; i < this.rows; i++) {\n          sum[i] /= this.columns;\n        }\n        return sum;\n      }\n      case 'column': {\n        for (let i = 0; i < this.columns; i++) {\n          sum[i] /= this.rows;\n        }\n        return sum;\n      }\n      case undefined:\n        return sum / this.size;\n      default:\n        throw new Error(`invalid option: ${by}`);\n    }\n  }\n\n  variance(by, options = {}) {\n    if (typeof by === 'object') {\n      options = by;\n      by = undefined;\n    }\n    if (typeof options !== 'object') {\n      throw new TypeError('options must be an object');\n    }\n    const { unbiased = true, mean = this.mean(by) } = options;\n    if (typeof unbiased !== 'boolean') {\n      throw new TypeError('unbiased must be a boolean');\n    }\n    switch (by) {\n      case 'row': {\n        if (!isAnyArray(mean)) {\n          throw new TypeError('mean must be an array');\n        }\n        return varianceByRow(this, unbiased, mean);\n      }\n      case 'column': {\n        if (!isAnyArray(mean)) {\n          throw new TypeError('mean must be an array');\n        }\n        return varianceByColumn(this, unbiased, mean);\n      }\n      case undefined: {\n        if (typeof mean !== 'number') {\n          throw new TypeError('mean must be a number');\n        }\n        return varianceAll(this, unbiased, mean);\n      }\n      default:\n        throw new Error(`invalid option: ${by}`);\n    }\n  }\n\n  standardDeviation(by, options) {\n    if (typeof by === 'object') {\n      options = by;\n      by = undefined;\n    }\n    const variance = this.variance(by, options);\n    if (by === undefined) {\n      return Math.sqrt(variance);\n    } else {\n      for (let i = 0; i < variance.length; i++) {\n        variance[i] = Math.sqrt(variance[i]);\n      }\n      return variance;\n    }\n  }\n\n  center(by, options = {}) {\n    if (typeof by === 'object') {\n      options = by;\n      by = undefined;\n    }\n    if (typeof options !== 'object') {\n      throw new TypeError('options must be an object');\n    }\n    const { center = this.mean(by) } = options;\n    switch (by) {\n      case 'row': {\n        if (!isAnyArray(center)) {\n          throw new TypeError('center must be an array');\n        }\n        centerByRow(this, center);\n        return this;\n      }\n      case 'column': {\n        if (!isAnyArray(center)) {\n          throw new TypeError('center must be an array');\n        }\n        centerByColumn(this, center);\n        return this;\n      }\n      case undefined: {\n        if (typeof center !== 'number') {\n          throw new TypeError('center must be a number');\n        }\n        centerAll(this, center);\n        return this;\n      }\n      default:\n        throw new Error(`invalid option: ${by}`);\n    }\n  }\n\n  scale(by, options = {}) {\n    if (typeof by === 'object') {\n      options = by;\n      by = undefined;\n    }\n    if (typeof options !== 'object') {\n      throw new TypeError('options must be an object');\n    }\n    let scale = options.scale;\n    switch (by) {\n      case 'row': {\n        if (scale === undefined) {\n          scale = getScaleByRow(this);\n        } else if (!isAnyArray(scale)) {\n          throw new TypeError('scale must be an array');\n        }\n        scaleByRow(this, scale);\n        return this;\n      }\n      case 'column': {\n        if (scale === undefined) {\n          scale = getScaleByColumn(this);\n        } else if (!isAnyArray(scale)) {\n          throw new TypeError('scale must be an array');\n        }\n        scaleByColumn(this, scale);\n        return this;\n      }\n      case undefined: {\n        if (scale === undefined) {\n          scale = getScaleAll(this);\n        } else if (typeof scale !== 'number') {\n          throw new TypeError('scale must be a number');\n        }\n        scaleAll(this, scale);\n        return this;\n      }\n      default:\n        throw new Error(`invalid option: ${by}`);\n    }\n  }\n\n  toString(options) {\n    return inspectMatrixWithOptions(this, options);\n  }\n}\n\nAbstractMatrix.prototype.klass = 'Matrix';\nif (typeof Symbol !== 'undefined') {\n  AbstractMatrix.prototype[Symbol.for('nodejs.util.inspect.custom')] =\n    inspectMatrix;\n}\n\nfunction compareNumbers(a, b) {\n  return a - b;\n}\n\nfunction isArrayOfNumbers(array) {\n  return array.every((element) => {\n    return typeof element === 'number';\n  });\n}\n\n// Synonyms\nAbstractMatrix.random = AbstractMatrix.rand;\nAbstractMatrix.randomInt = AbstractMatrix.randInt;\nAbstractMatrix.diagonal = AbstractMatrix.diag;\nAbstractMatrix.prototype.diagonal = AbstractMatrix.prototype.diag;\nAbstractMatrix.identity = AbstractMatrix.eye;\nAbstractMatrix.prototype.negate = AbstractMatrix.prototype.neg;\nAbstractMatrix.prototype.tensorProduct =\n  AbstractMatrix.prototype.kroneckerProduct;\n\nexport default class Matrix extends AbstractMatrix {\n  constructor(nRows, nColumns) {\n    super();\n    if (Matrix.isMatrix(nRows)) {\n      // eslint-disable-next-line no-constructor-return\n      return nRows.clone();\n    } else if (Number.isInteger(nRows) && nRows >= 0) {\n      // Create an empty matrix\n      this.data = [];\n      if (Number.isInteger(nColumns) && nColumns >= 0) {\n        for (let i = 0; i < nRows; i++) {\n          this.data.push(new Float64Array(nColumns));\n        }\n      } else {\n        throw new TypeError('nColumns must be a positive integer');\n      }\n    } else if (isAnyArray(nRows)) {\n      // Copy the values from the 2D array\n      const arrayData = nRows;\n      nRows = arrayData.length;\n      nColumns = nRows ? arrayData[0].length : 0;\n      if (typeof nColumns !== 'number') {\n        throw new TypeError(\n          'Data must be a 2D array with at least one element',\n        );\n      }\n      this.data = [];\n      for (let i = 0; i < nRows; i++) {\n        if (arrayData[i].length !== nColumns) {\n          throw new RangeError('Inconsistent array dimensions');\n        }\n        if (!isArrayOfNumbers(arrayData[i])) {\n          throw new TypeError('Input data contains non-numeric values');\n        }\n        this.data.push(Float64Array.from(arrayData[i]));\n      }\n    } else {\n      throw new TypeError(\n        'First argument must be a positive number or an array',\n      );\n    }\n    this.rows = nRows;\n    this.columns = nColumns;\n  }\n\n  set(rowIndex, columnIndex, value) {\n    this.data[rowIndex][columnIndex] = value;\n    return this;\n  }\n\n  get(rowIndex, columnIndex) {\n    return this.data[rowIndex][columnIndex];\n  }\n\n  removeRow(index) {\n    checkRowIndex(this, index);\n    this.data.splice(index, 1);\n    this.rows -= 1;\n    return this;\n  }\n\n  addRow(index, array) {\n    if (array === undefined) {\n      array = index;\n      index = this.rows;\n    }\n    checkRowIndex(this, index, true);\n    array = Float64Array.from(checkRowVector(this, array));\n    this.data.splice(index, 0, array);\n    this.rows += 1;\n    return this;\n  }\n\n  removeColumn(index) {\n    checkColumnIndex(this, index);\n    for (let i = 0; i < this.rows; i++) {\n      const newRow = new Float64Array(this.columns - 1);\n      for (let j = 0; j < index; j++) {\n        newRow[j] = this.data[i][j];\n      }\n      for (let j = index + 1; j < this.columns; j++) {\n        newRow[j - 1] = this.data[i][j];\n      }\n      this.data[i] = newRow;\n    }\n    this.columns -= 1;\n    return this;\n  }\n\n  addColumn(index, array) {\n    if (typeof array === 'undefined') {\n      array = index;\n      index = this.columns;\n    }\n    checkColumnIndex(this, index, true);\n    array = checkColumnVector(this, array);\n    for (let i = 0; i < this.rows; i++) {\n      const newRow = new Float64Array(this.columns + 1);\n      let j = 0;\n      for (; j < index; j++) {\n        newRow[j] = this.data[i][j];\n      }\n      newRow[j++] = array[i];\n      for (; j < this.columns + 1; j++) {\n        newRow[j] = this.data[i][j - 1];\n      }\n      this.data[i] = newRow;\n    }\n    this.columns += 1;\n    return this;\n  }\n}\n\ninstallMathOperations(AbstractMatrix, Matrix);\n", "import { AbstractMatrix } from '../matrix';\n\nexport default class BaseView extends AbstractMatrix {\n  constructor(matrix, rows, columns) {\n    super();\n    this.matrix = matrix;\n    this.rows = rows;\n    this.columns = columns;\n  }\n}\n", "import { checkColumnIndex } from '../util';\n\nimport BaseView from './base';\n\nexport default class MatrixColumnView extends BaseView {\n  constructor(matrix, column) {\n    checkColumnIndex(matrix, column);\n    super(matrix, matrix.rows, 1);\n    this.column = column;\n  }\n\n  set(rowIndex, columnIndex, value) {\n    this.matrix.set(rowIndex, this.column, value);\n    return this;\n  }\n\n  get(rowIndex) {\n    return this.matrix.get(rowIndex, this.column);\n  }\n}\n", "import { checkColumnIndices } from '../util';\n\nimport BaseView from './base';\n\nexport default class MatrixColumnSelectionView extends BaseView {\n  constructor(matrix, columnIndices) {\n    checkColumnIndices(matrix, columnIndices);\n    super(matrix, matrix.rows, columnIndices.length);\n    this.columnIndices = columnIndices;\n  }\n\n  set(rowIndex, columnIndex, value) {\n    this.matrix.set(rowIndex, this.columnIndices[columnIndex], value);\n    return this;\n  }\n\n  get(rowIndex, columnIndex) {\n    return this.matrix.get(rowIndex, this.columnIndices[columnIndex]);\n  }\n}\n", "import BaseView from './base';\n\nexport default class MatrixFlipColumnView extends BaseView {\n  constructor(matrix) {\n    super(matrix, matrix.rows, matrix.columns);\n  }\n\n  set(rowIndex, columnIndex, value) {\n    this.matrix.set(rowIndex, this.columns - columnIndex - 1, value);\n    return this;\n  }\n\n  get(rowIndex, columnIndex) {\n    return this.matrix.get(rowIndex, this.columns - columnIndex - 1);\n  }\n}\n", "import BaseView from './base';\n\nexport default class MatrixFlipRowView extends BaseView {\n  constructor(matrix) {\n    super(matrix, matrix.rows, matrix.columns);\n  }\n\n  set(rowIndex, columnIndex, value) {\n    this.matrix.set(this.rows - rowIndex - 1, columnIndex, value);\n    return this;\n  }\n\n  get(rowIndex, columnIndex) {\n    return this.matrix.get(this.rows - rowIndex - 1, columnIndex);\n  }\n}\n", "import { checkRowIndex } from '../util';\n\nimport BaseView from './base';\n\nexport default class MatrixRowView extends BaseView {\n  constructor(matrix, row) {\n    checkRowIndex(matrix, row);\n    super(matrix, 1, matrix.columns);\n    this.row = row;\n  }\n\n  set(rowIndex, columnIndex, value) {\n    this.matrix.set(this.row, columnIndex, value);\n    return this;\n  }\n\n  get(rowIndex, columnIndex) {\n    return this.matrix.get(this.row, columnIndex);\n  }\n}\n", "import { checkRowIndices } from '../util';\n\nimport BaseView from './base';\n\nexport default class MatrixRowSelectionView extends BaseView {\n  constructor(matrix, rowIndices) {\n    checkRowIndices(matrix, rowIndices);\n    super(matrix, rowIndices.length, matrix.columns);\n    this.rowIndices = rowIndices;\n  }\n\n  set(rowIndex, columnIndex, value) {\n    this.matrix.set(this.rowIndices[rowIndex], columnIndex, value);\n    return this;\n  }\n\n  get(rowIndex, columnIndex) {\n    return this.matrix.get(this.rowIndices[rowIndex], columnIndex);\n  }\n}\n", "import { checkRowIndices, checkColumnIndices } from '../util';\n\nimport BaseView from './base';\n\nexport default class MatrixSelectionView extends BaseView {\n  constructor(matrix, rowIndices, columnIndices) {\n    checkRowIndices(matrix, rowIndices);\n    checkColumnIndices(matrix, columnIndices);\n    super(matrix, rowIndices.length, columnIndices.length);\n    this.rowIndices = rowIndices;\n    this.columnIndices = columnIndices;\n  }\n\n  set(rowIndex, columnIndex, value) {\n    this.matrix.set(\n      this.rowIndices[rowIndex],\n      this.columnIndices[columnIndex],\n      value,\n    );\n    return this;\n  }\n\n  get(rowIndex, columnIndex) {\n    return this.matrix.get(\n      this.rowIndices[rowIndex],\n      this.columnIndices[columnIndex],\n    );\n  }\n}\n", "import { checkRange } from '../util';\n\nimport BaseView from './base';\n\nexport default class MatrixSubView extends BaseView {\n  constructor(matrix, startRow, endRow, startColumn, endColumn) {\n    checkRange(matrix, startRow, endRow, startColumn, endColumn);\n    super(matrix, endRow - startRow + 1, endColumn - startColumn + 1);\n    this.startRow = startRow;\n    this.startColumn = startColumn;\n  }\n\n  set(rowIndex, columnIndex, value) {\n    this.matrix.set(\n      this.startRow + rowIndex,\n      this.startColumn + columnIndex,\n      value,\n    );\n    return this;\n  }\n\n  get(rowIndex, columnIndex) {\n    return this.matrix.get(\n      this.startRow + rowIndex,\n      this.startColumn + columnIndex,\n    );\n  }\n}\n", "import BaseView from './base';\n\nexport default class MatrixTransposeView extends BaseView {\n  constructor(matrix) {\n    super(matrix, matrix.columns, matrix.rows);\n  }\n\n  set(rowIndex, columnIndex, value) {\n    this.matrix.set(columnIndex, rowIndex, value);\n    return this;\n  }\n\n  get(rowIndex, columnIndex) {\n    return this.matrix.get(columnIndex, rowIndex);\n  }\n}\n", "import { AbstractMatrix } from '../matrix';\n\nexport default class WrapperMatrix1D extends AbstractMatrix {\n  constructor(data, options = {}) {\n    const { rows = 1 } = options;\n\n    if (data.length % rows !== 0) {\n      throw new Error('the data length is not divisible by the number of rows');\n    }\n    super();\n    this.rows = rows;\n    this.columns = data.length / rows;\n    this.data = data;\n  }\n\n  set(rowIndex, columnIndex, value) {\n    let index = this._calculateIndex(rowIndex, columnIndex);\n    this.data[index] = value;\n    return this;\n  }\n\n  get(rowIndex, columnIndex) {\n    let index = this._calculateIndex(rowIndex, columnIndex);\n    return this.data[index];\n  }\n\n  _calculateIndex(row, column) {\n    return row * this.columns + column;\n  }\n}\n", "import { AbstractMatrix } from '../matrix';\n\nexport default class WrapperMatrix2D extends AbstractMatrix {\n  constructor(data) {\n    super();\n    this.data = data;\n    this.rows = data.length;\n    this.columns = data[0].length;\n  }\n\n  set(rowIndex, columnIndex, value) {\n    this.data[rowIndex][columnIndex] = value;\n    return this;\n  }\n\n  get(rowIndex, columnIndex) {\n    return this.data[rowIndex][columnIndex];\n  }\n}\n", "import { isAnyArray } from 'is-any-array';\n\nimport WrapperMatrix1D from './WrapperMatrix1D';\nimport WrapperMatrix2D from './WrapperMatrix2D';\n\nexport function wrap(array, options) {\n  if (isAnyArray(array)) {\n    if (array[0] && isAnyArray(array[0])) {\n      return new WrapperMatrix2D(array);\n    } else {\n      return new WrapperMatrix1D(array, options);\n    }\n  } else {\n    throw new Error('the argument is not an array');\n  }\n}\n", "import Matrix from '../matrix';\nimport WrapperMatrix2D from '../wrap/WrapperMatrix2D';\n\nexport default class LuDecomposition {\n  constructor(matrix) {\n    matrix = WrapperMatrix2D.checkMatrix(matrix);\n\n    let lu = matrix.clone();\n    let rows = lu.rows;\n    let columns = lu.columns;\n    let pivotVector = new Float64Array(rows);\n    let pivotSign = 1;\n    let i, j, k, p, s, t, v;\n    let LUcolj, kmax;\n\n    for (i = 0; i < rows; i++) {\n      pivotVector[i] = i;\n    }\n\n    LUcolj = new Float64Array(rows);\n\n    for (j = 0; j < columns; j++) {\n      for (i = 0; i < rows; i++) {\n        LUcolj[i] = lu.get(i, j);\n      }\n\n      for (i = 0; i < rows; i++) {\n        kmax = Math.min(i, j);\n        s = 0;\n        for (k = 0; k < kmax; k++) {\n          s += lu.get(i, k) * LUcolj[k];\n        }\n        LUcolj[i] -= s;\n        lu.set(i, j, LUcolj[i]);\n      }\n\n      p = j;\n      for (i = j + 1; i < rows; i++) {\n        if (Math.abs(LUcolj[i]) > Math.abs(LUcolj[p])) {\n          p = i;\n        }\n      }\n\n      if (p !== j) {\n        for (k = 0; k < columns; k++) {\n          t = lu.get(p, k);\n          lu.set(p, k, lu.get(j, k));\n          lu.set(j, k, t);\n        }\n\n        v = pivotVector[p];\n        pivotVector[p] = pivotVector[j];\n        pivotVector[j] = v;\n\n        pivotSign = -pivotSign;\n      }\n\n      if (j < rows && lu.get(j, j) !== 0) {\n        for (i = j + 1; i < rows; i++) {\n          lu.set(i, j, lu.get(i, j) / lu.get(j, j));\n        }\n      }\n    }\n\n    this.LU = lu;\n    this.pivotVector = pivotVector;\n    this.pivotSign = pivotSign;\n  }\n\n  isSingular() {\n    let data = this.LU;\n    let col = data.columns;\n    for (let j = 0; j < col; j++) {\n      if (data.get(j, j) === 0) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  solve(value) {\n    value = Matrix.checkMatrix(value);\n\n    let lu = this.LU;\n    let rows = lu.rows;\n\n    if (rows !== value.rows) {\n      throw new Error('Invalid matrix dimensions');\n    }\n    if (this.isSingular()) {\n      throw new Error('LU matrix is singular');\n    }\n\n    let count = value.columns;\n    let X = value.subMatrixRow(this.pivotVector, 0, count - 1);\n    let columns = lu.columns;\n    let i, j, k;\n\n    for (k = 0; k < columns; k++) {\n      for (i = k + 1; i < columns; i++) {\n        for (j = 0; j < count; j++) {\n          X.set(i, j, X.get(i, j) - X.get(k, j) * lu.get(i, k));\n        }\n      }\n    }\n    for (k = columns - 1; k >= 0; k--) {\n      for (j = 0; j < count; j++) {\n        X.set(k, j, X.get(k, j) / lu.get(k, k));\n      }\n      for (i = 0; i < k; i++) {\n        for (j = 0; j < count; j++) {\n          X.set(i, j, X.get(i, j) - X.get(k, j) * lu.get(i, k));\n        }\n      }\n    }\n    return X;\n  }\n\n  get determinant() {\n    let data = this.LU;\n    if (!data.isSquare()) {\n      throw new Error('Matrix must be square');\n    }\n    let determinant = this.pivotSign;\n    let col = data.columns;\n    for (let j = 0; j < col; j++) {\n      determinant *= data.get(j, j);\n    }\n    return determinant;\n  }\n\n  get lowerTriangularMatrix() {\n    let data = this.LU;\n    let rows = data.rows;\n    let columns = data.columns;\n    let X = new Matrix(rows, columns);\n    for (let i = 0; i < rows; i++) {\n      for (let j = 0; j < columns; j++) {\n        if (i > j) {\n          X.set(i, j, data.get(i, j));\n        } else if (i === j) {\n          X.set(i, j, 1);\n        } else {\n          X.set(i, j, 0);\n        }\n      }\n    }\n    return X;\n  }\n\n  get upperTriangularMatrix() {\n    let data = this.LU;\n    let rows = data.rows;\n    let columns = data.columns;\n    let X = new Matrix(rows, columns);\n    for (let i = 0; i < rows; i++) {\n      for (let j = 0; j < columns; j++) {\n        if (i <= j) {\n          X.set(i, j, data.get(i, j));\n        } else {\n          X.set(i, j, 0);\n        }\n      }\n    }\n    return X;\n  }\n\n  get pivotPermutationVector() {\n    return Array.from(this.pivotVector);\n  }\n}\n", "export function hypotenuse(a, b) {\n  let r = 0;\n  if (Math.abs(a) > Math.abs(b)) {\n    r = b / a;\n    return Math.abs(a) * Math.sqrt(1 + r * r);\n  }\n  if (b !== 0) {\n    r = a / b;\n    return Math.abs(b) * Math.sqrt(1 + r * r);\n  }\n  return 0;\n}\n", "import Matrix from '../matrix';\nimport WrapperMatrix2D from '../wrap/WrapperMatrix2D';\n\nimport { hypotenuse } from './util';\n\nexport default class QrDecomposition {\n  constructor(value) {\n    value = WrapperMatrix2D.checkMatrix(value);\n\n    let qr = value.clone();\n    let m = value.rows;\n    let n = value.columns;\n    let rdiag = new Float64Array(n);\n    let i, j, k, s;\n\n    for (k = 0; k < n; k++) {\n      let nrm = 0;\n      for (i = k; i < m; i++) {\n        nrm = hypotenuse(nrm, qr.get(i, k));\n      }\n      if (nrm !== 0) {\n        if (qr.get(k, k) < 0) {\n          nrm = -nrm;\n        }\n        for (i = k; i < m; i++) {\n          qr.set(i, k, qr.get(i, k) / nrm);\n        }\n        qr.set(k, k, qr.get(k, k) + 1);\n        for (j = k + 1; j < n; j++) {\n          s = 0;\n          for (i = k; i < m; i++) {\n            s += qr.get(i, k) * qr.get(i, j);\n          }\n          s = -s / qr.get(k, k);\n          for (i = k; i < m; i++) {\n            qr.set(i, j, qr.get(i, j) + s * qr.get(i, k));\n          }\n        }\n      }\n      rdiag[k] = -nrm;\n    }\n\n    this.QR = qr;\n    this.Rdiag = rdiag;\n  }\n\n  solve(value) {\n    value = Matrix.checkMatrix(value);\n\n    let qr = this.QR;\n    let m = qr.rows;\n\n    if (value.rows !== m) {\n      throw new Error('Matrix row dimensions must agree');\n    }\n    if (!this.isFullRank()) {\n      throw new Error('Matrix is rank deficient');\n    }\n\n    let count = value.columns;\n    let X = value.clone();\n    let n = qr.columns;\n    let i, j, k, s;\n\n    for (k = 0; k < n; k++) {\n      for (j = 0; j < count; j++) {\n        s = 0;\n        for (i = k; i < m; i++) {\n          s += qr.get(i, k) * X.get(i, j);\n        }\n        s = -s / qr.get(k, k);\n        for (i = k; i < m; i++) {\n          X.set(i, j, X.get(i, j) + s * qr.get(i, k));\n        }\n      }\n    }\n    for (k = n - 1; k >= 0; k--) {\n      for (j = 0; j < count; j++) {\n        X.set(k, j, X.get(k, j) / this.Rdiag[k]);\n      }\n      for (i = 0; i < k; i++) {\n        for (j = 0; j < count; j++) {\n          X.set(i, j, X.get(i, j) - X.get(k, j) * qr.get(i, k));\n        }\n      }\n    }\n\n    return X.subMatrix(0, n - 1, 0, count - 1);\n  }\n\n  isFullRank() {\n    let columns = this.QR.columns;\n    for (let i = 0; i < columns; i++) {\n      if (this.Rdiag[i] === 0) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  get upperTriangularMatrix() {\n    let qr = this.QR;\n    let n = qr.columns;\n    let X = new Matrix(n, n);\n    let i, j;\n    for (i = 0; i < n; i++) {\n      for (j = 0; j < n; j++) {\n        if (i < j) {\n          X.set(i, j, qr.get(i, j));\n        } else if (i === j) {\n          X.set(i, j, this.Rdiag[i]);\n        } else {\n          X.set(i, j, 0);\n        }\n      }\n    }\n    return X;\n  }\n\n  get orthogonalMatrix() {\n    let qr = this.QR;\n    let rows = qr.rows;\n    let columns = qr.columns;\n    let X = new Matrix(rows, columns);\n    let i, j, k, s;\n\n    for (k = columns - 1; k >= 0; k--) {\n      for (i = 0; i < rows; i++) {\n        X.set(i, k, 0);\n      }\n      X.set(k, k, 1);\n      for (j = k; j < columns; j++) {\n        if (qr.get(k, k) !== 0) {\n          s = 0;\n          for (i = k; i < rows; i++) {\n            s += qr.get(i, k) * X.get(i, j);\n          }\n\n          s = -s / qr.get(k, k);\n\n          for (i = k; i < rows; i++) {\n            X.set(i, j, X.get(i, j) + s * qr.get(i, k));\n          }\n        }\n      }\n    }\n    return X;\n  }\n}\n", "import Matrix from '../matrix';\nimport WrapperMatrix2D from '../wrap/WrapperMatrix2D';\n\nimport { hypotenuse } from './util';\n\nexport default class SingularValueDecomposition {\n  constructor(value, options = {}) {\n    value = WrapperMatrix2D.checkMatrix(value);\n\n    if (value.isEmpty()) {\n      throw new Error('Matrix must be non-empty');\n    }\n\n    let m = value.rows;\n    let n = value.columns;\n\n    const {\n      computeLeftSingularVectors = true,\n      computeRightSingularVectors = true,\n      autoTranspose = false,\n    } = options;\n\n    let wantu = Boolean(computeLeftSingularVectors);\n    let wantv = Boolean(computeRightSingularVectors);\n\n    let swapped = false;\n    let a;\n    if (m < n) {\n      if (!autoTranspose) {\n        a = value.clone();\n        // eslint-disable-next-line no-console\n        console.warn(\n          'Computing SVD on a matrix with more columns than rows. Consider enabling autoTranspose',\n        );\n      } else {\n        a = value.transpose();\n        m = a.rows;\n        n = a.columns;\n        swapped = true;\n        let aux = wantu;\n        wantu = wantv;\n        wantv = aux;\n      }\n    } else {\n      a = value.clone();\n    }\n\n    let nu = Math.min(m, n);\n    let ni = Math.min(m + 1, n);\n    let s = new Float64Array(ni);\n    let U = new Matrix(m, nu);\n    let V = new Matrix(n, n);\n\n    let e = new Float64Array(n);\n    let work = new Float64Array(m);\n\n    let si = new Float64Array(ni);\n    for (let i = 0; i < ni; i++) si[i] = i;\n\n    let nct = Math.min(m - 1, n);\n    let nrt = Math.max(0, Math.min(n - 2, m));\n    let mrc = Math.max(nct, nrt);\n\n    for (let k = 0; k < mrc; k++) {\n      if (k < nct) {\n        s[k] = 0;\n        for (let i = k; i < m; i++) {\n          s[k] = hypotenuse(s[k], a.get(i, k));\n        }\n        if (s[k] !== 0) {\n          if (a.get(k, k) < 0) {\n            s[k] = -s[k];\n          }\n          for (let i = k; i < m; i++) {\n            a.set(i, k, a.get(i, k) / s[k]);\n          }\n          a.set(k, k, a.get(k, k) + 1);\n        }\n        s[k] = -s[k];\n      }\n\n      for (let j = k + 1; j < n; j++) {\n        if (k < nct && s[k] !== 0) {\n          let t = 0;\n          for (let i = k; i < m; i++) {\n            t += a.get(i, k) * a.get(i, j);\n          }\n          t = -t / a.get(k, k);\n          for (let i = k; i < m; i++) {\n            a.set(i, j, a.get(i, j) + t * a.get(i, k));\n          }\n        }\n        e[j] = a.get(k, j);\n      }\n\n      if (wantu && k < nct) {\n        for (let i = k; i < m; i++) {\n          U.set(i, k, a.get(i, k));\n        }\n      }\n\n      if (k < nrt) {\n        e[k] = 0;\n        for (let i = k + 1; i < n; i++) {\n          e[k] = hypotenuse(e[k], e[i]);\n        }\n        if (e[k] !== 0) {\n          if (e[k + 1] < 0) {\n            e[k] = 0 - e[k];\n          }\n          for (let i = k + 1; i < n; i++) {\n            e[i] /= e[k];\n          }\n          e[k + 1] += 1;\n        }\n        e[k] = -e[k];\n        if (k + 1 < m && e[k] !== 0) {\n          for (let i = k + 1; i < m; i++) {\n            work[i] = 0;\n          }\n          for (let i = k + 1; i < m; i++) {\n            for (let j = k + 1; j < n; j++) {\n              work[i] += e[j] * a.get(i, j);\n            }\n          }\n          for (let j = k + 1; j < n; j++) {\n            let t = -e[j] / e[k + 1];\n            for (let i = k + 1; i < m; i++) {\n              a.set(i, j, a.get(i, j) + t * work[i]);\n            }\n          }\n        }\n        if (wantv) {\n          for (let i = k + 1; i < n; i++) {\n            V.set(i, k, e[i]);\n          }\n        }\n      }\n    }\n\n    let p = Math.min(n, m + 1);\n    if (nct < n) {\n      s[nct] = a.get(nct, nct);\n    }\n    if (m < p) {\n      s[p - 1] = 0;\n    }\n    if (nrt + 1 < p) {\n      e[nrt] = a.get(nrt, p - 1);\n    }\n    e[p - 1] = 0;\n\n    if (wantu) {\n      for (let j = nct; j < nu; j++) {\n        for (let i = 0; i < m; i++) {\n          U.set(i, j, 0);\n        }\n        U.set(j, j, 1);\n      }\n      for (let k = nct - 1; k >= 0; k--) {\n        if (s[k] !== 0) {\n          for (let j = k + 1; j < nu; j++) {\n            let t = 0;\n            for (let i = k; i < m; i++) {\n              t += U.get(i, k) * U.get(i, j);\n            }\n            t = -t / U.get(k, k);\n            for (let i = k; i < m; i++) {\n              U.set(i, j, U.get(i, j) + t * U.get(i, k));\n            }\n          }\n          for (let i = k; i < m; i++) {\n            U.set(i, k, -U.get(i, k));\n          }\n          U.set(k, k, 1 + U.get(k, k));\n          for (let i = 0; i < k - 1; i++) {\n            U.set(i, k, 0);\n          }\n        } else {\n          for (let i = 0; i < m; i++) {\n            U.set(i, k, 0);\n          }\n          U.set(k, k, 1);\n        }\n      }\n    }\n\n    if (wantv) {\n      for (let k = n - 1; k >= 0; k--) {\n        if (k < nrt && e[k] !== 0) {\n          for (let j = k + 1; j < n; j++) {\n            let t = 0;\n            for (let i = k + 1; i < n; i++) {\n              t += V.get(i, k) * V.get(i, j);\n            }\n            t = -t / V.get(k + 1, k);\n            for (let i = k + 1; i < n; i++) {\n              V.set(i, j, V.get(i, j) + t * V.get(i, k));\n            }\n          }\n        }\n        for (let i = 0; i < n; i++) {\n          V.set(i, k, 0);\n        }\n        V.set(k, k, 1);\n      }\n    }\n\n    let pp = p - 1;\n    let iter = 0;\n    let eps = Number.EPSILON;\n    while (p > 0) {\n      let k, kase;\n      for (k = p - 2; k >= -1; k--) {\n        if (k === -1) {\n          break;\n        }\n        const alpha =\n          Number.MIN_VALUE + eps * Math.abs(s[k] + Math.abs(s[k + 1]));\n        if (Math.abs(e[k]) <= alpha || Number.isNaN(e[k])) {\n          e[k] = 0;\n          break;\n        }\n      }\n      if (k === p - 2) {\n        kase = 4;\n      } else {\n        let ks;\n        for (ks = p - 1; ks >= k; ks--) {\n          if (ks === k) {\n            break;\n          }\n          let t =\n            (ks !== p ? Math.abs(e[ks]) : 0) +\n            (ks !== k + 1 ? Math.abs(e[ks - 1]) : 0);\n          if (Math.abs(s[ks]) <= eps * t) {\n            s[ks] = 0;\n            break;\n          }\n        }\n        if (ks === k) {\n          kase = 3;\n        } else if (ks === p - 1) {\n          kase = 1;\n        } else {\n          kase = 2;\n          k = ks;\n        }\n      }\n\n      k++;\n\n      switch (kase) {\n        case 1: {\n          let f = e[p - 2];\n          e[p - 2] = 0;\n          for (let j = p - 2; j >= k; j--) {\n            let t = hypotenuse(s[j], f);\n            let cs = s[j] / t;\n            let sn = f / t;\n            s[j] = t;\n            if (j !== k) {\n              f = -sn * e[j - 1];\n              e[j - 1] = cs * e[j - 1];\n            }\n            if (wantv) {\n              for (let i = 0; i < n; i++) {\n                t = cs * V.get(i, j) + sn * V.get(i, p - 1);\n                V.set(i, p - 1, -sn * V.get(i, j) + cs * V.get(i, p - 1));\n                V.set(i, j, t);\n              }\n            }\n          }\n          break;\n        }\n        case 2: {\n          let f = e[k - 1];\n          e[k - 1] = 0;\n          for (let j = k; j < p; j++) {\n            let t = hypotenuse(s[j], f);\n            let cs = s[j] / t;\n            let sn = f / t;\n            s[j] = t;\n            f = -sn * e[j];\n            e[j] = cs * e[j];\n            if (wantu) {\n              for (let i = 0; i < m; i++) {\n                t = cs * U.get(i, j) + sn * U.get(i, k - 1);\n                U.set(i, k - 1, -sn * U.get(i, j) + cs * U.get(i, k - 1));\n                U.set(i, j, t);\n              }\n            }\n          }\n          break;\n        }\n        case 3: {\n          const scale = Math.max(\n            Math.abs(s[p - 1]),\n            Math.abs(s[p - 2]),\n            Math.abs(e[p - 2]),\n            Math.abs(s[k]),\n            Math.abs(e[k]),\n          );\n          const sp = s[p - 1] / scale;\n          const spm1 = s[p - 2] / scale;\n          const epm1 = e[p - 2] / scale;\n          const sk = s[k] / scale;\n          const ek = e[k] / scale;\n          const b = ((spm1 + sp) * (spm1 - sp) + epm1 * epm1) / 2;\n          const c = sp * epm1 * (sp * epm1);\n          let shift = 0;\n          if (b !== 0 || c !== 0) {\n            if (b < 0) {\n              shift = 0 - Math.sqrt(b * b + c);\n            } else {\n              shift = Math.sqrt(b * b + c);\n            }\n            shift = c / (b + shift);\n          }\n          let f = (sk + sp) * (sk - sp) + shift;\n          let g = sk * ek;\n          for (let j = k; j < p - 1; j++) {\n            let t = hypotenuse(f, g);\n            if (t === 0) t = Number.MIN_VALUE;\n            let cs = f / t;\n            let sn = g / t;\n            if (j !== k) {\n              e[j - 1] = t;\n            }\n            f = cs * s[j] + sn * e[j];\n            e[j] = cs * e[j] - sn * s[j];\n            g = sn * s[j + 1];\n            s[j + 1] = cs * s[j + 1];\n            if (wantv) {\n              for (let i = 0; i < n; i++) {\n                t = cs * V.get(i, j) + sn * V.get(i, j + 1);\n                V.set(i, j + 1, -sn * V.get(i, j) + cs * V.get(i, j + 1));\n                V.set(i, j, t);\n              }\n            }\n            t = hypotenuse(f, g);\n            if (t === 0) t = Number.MIN_VALUE;\n            cs = f / t;\n            sn = g / t;\n            s[j] = t;\n            f = cs * e[j] + sn * s[j + 1];\n            s[j + 1] = -sn * e[j] + cs * s[j + 1];\n            g = sn * e[j + 1];\n            e[j + 1] = cs * e[j + 1];\n            if (wantu && j < m - 1) {\n              for (let i = 0; i < m; i++) {\n                t = cs * U.get(i, j) + sn * U.get(i, j + 1);\n                U.set(i, j + 1, -sn * U.get(i, j) + cs * U.get(i, j + 1));\n                U.set(i, j, t);\n              }\n            }\n          }\n          e[p - 2] = f;\n          iter = iter + 1;\n          break;\n        }\n        case 4: {\n          if (s[k] <= 0) {\n            s[k] = s[k] < 0 ? -s[k] : 0;\n            if (wantv) {\n              for (let i = 0; i <= pp; i++) {\n                V.set(i, k, -V.get(i, k));\n              }\n            }\n          }\n          while (k < pp) {\n            if (s[k] >= s[k + 1]) {\n              break;\n            }\n            let t = s[k];\n            s[k] = s[k + 1];\n            s[k + 1] = t;\n            if (wantv && k < n - 1) {\n              for (let i = 0; i < n; i++) {\n                t = V.get(i, k + 1);\n                V.set(i, k + 1, V.get(i, k));\n                V.set(i, k, t);\n              }\n            }\n            if (wantu && k < m - 1) {\n              for (let i = 0; i < m; i++) {\n                t = U.get(i, k + 1);\n                U.set(i, k + 1, U.get(i, k));\n                U.set(i, k, t);\n              }\n            }\n            k++;\n          }\n          iter = 0;\n          p--;\n          break;\n        }\n        // no default\n      }\n    }\n\n    if (swapped) {\n      let tmp = V;\n      V = U;\n      U = tmp;\n    }\n\n    this.m = m;\n    this.n = n;\n    this.s = s;\n    this.U = U;\n    this.V = V;\n  }\n\n  solve(value) {\n    let Y = value;\n    let e = this.threshold;\n    let scols = this.s.length;\n    let Ls = Matrix.zeros(scols, scols);\n\n    for (let i = 0; i < scols; i++) {\n      if (Math.abs(this.s[i]) <= e) {\n        Ls.set(i, i, 0);\n      } else {\n        Ls.set(i, i, 1 / this.s[i]);\n      }\n    }\n\n    let U = this.U;\n    let V = this.rightSingularVectors;\n\n    let VL = V.mmul(Ls);\n    let vrows = V.rows;\n    let urows = U.rows;\n    let VLU = Matrix.zeros(vrows, urows);\n\n    for (let i = 0; i < vrows; i++) {\n      for (let j = 0; j < urows; j++) {\n        let sum = 0;\n        for (let k = 0; k < scols; k++) {\n          sum += VL.get(i, k) * U.get(j, k);\n        }\n        VLU.set(i, j, sum);\n      }\n    }\n\n    return VLU.mmul(Y);\n  }\n\n  solveForDiagonal(value) {\n    return this.solve(Matrix.diag(value));\n  }\n\n  inverse() {\n    let V = this.V;\n    let e = this.threshold;\n    let vrows = V.rows;\n    let vcols = V.columns;\n    let X = new Matrix(vrows, this.s.length);\n\n    for (let i = 0; i < vrows; i++) {\n      for (let j = 0; j < vcols; j++) {\n        if (Math.abs(this.s[j]) > e) {\n          X.set(i, j, V.get(i, j) / this.s[j]);\n        }\n      }\n    }\n\n    let U = this.U;\n\n    let urows = U.rows;\n    let ucols = U.columns;\n    let Y = new Matrix(vrows, urows);\n\n    for (let i = 0; i < vrows; i++) {\n      for (let j = 0; j < urows; j++) {\n        let sum = 0;\n        for (let k = 0; k < ucols; k++) {\n          sum += X.get(i, k) * U.get(j, k);\n        }\n        Y.set(i, j, sum);\n      }\n    }\n\n    return Y;\n  }\n\n  get condition() {\n    return this.s[0] / this.s[Math.min(this.m, this.n) - 1];\n  }\n\n  get norm2() {\n    return this.s[0];\n  }\n\n  get rank() {\n    let tol = Math.max(this.m, this.n) * this.s[0] * Number.EPSILON;\n    let r = 0;\n    let s = this.s;\n    for (let i = 0, ii = s.length; i < ii; i++) {\n      if (s[i] > tol) {\n        r++;\n      }\n    }\n    return r;\n  }\n\n  get diagonal() {\n    return Array.from(this.s);\n  }\n\n  get threshold() {\n    return (Number.EPSILON / 2) * Math.max(this.m, this.n) * this.s[0];\n  }\n\n  get leftSingularVectors() {\n    return this.U;\n  }\n\n  get rightSingularVectors() {\n    return this.V;\n  }\n\n  get diagonalMatrix() {\n    return Matrix.diag(this.s);\n  }\n}\n", "import LuDecomposition from './dc/lu';\nimport QrDecomposition from './dc/qr';\nimport SingularValueDecomposition from './dc/svd';\nimport Matrix from './matrix';\nimport WrapperMatrix2D from './wrap/WrapperMatrix2D';\n\nexport function inverse(matrix, useSVD = false) {\n  matrix = WrapperMatrix2D.checkMatrix(matrix);\n  if (useSVD) {\n    return new SingularValueDecomposition(matrix).inverse();\n  } else {\n    return solve(matrix, Matrix.eye(matrix.rows));\n  }\n}\n\nexport function solve(leftHandSide, rightHandSide, useSVD = false) {\n  leftHandSide = WrapperMatrix2D.checkMatrix(leftHandSide);\n  rightHandSide = WrapperMatrix2D.checkMatrix(rightHandSide);\n  if (useSVD) {\n    return new SingularValueDecomposition(leftHandSide).solve(rightHandSide);\n  } else {\n    return leftHandSide.isSquare()\n      ? new LuDecomposition(leftHandSide).solve(rightHandSide)\n      : new QrDecomposition(leftHandSide).solve(rightHandSide);\n  }\n}\n", "import LuDecomposition from './dc/lu';\nimport Matrix from './matrix';\nimport MatrixSelectionView from './views/selection';\n\nexport function determinant(matrix) {\n  matrix = Matrix.checkMatrix(matrix);\n  if (matrix.isSquare()) {\n    if (matrix.columns === 0) {\n      return 1;\n    }\n\n    let a, b, c, d;\n    if (matrix.columns === 2) {\n      // 2 x 2 matrix\n      a = matrix.get(0, 0);\n      b = matrix.get(0, 1);\n      c = matrix.get(1, 0);\n      d = matrix.get(1, 1);\n\n      return a * d - b * c;\n    } else if (matrix.columns === 3) {\n      // 3 x 3 matrix\n      let subMatrix0, subMatrix1, subMatrix2;\n      subMatrix0 = new MatrixSelectionView(matrix, [1, 2], [1, 2]);\n      subMatrix1 = new MatrixSelectionView(matrix, [1, 2], [0, 2]);\n      subMatrix2 = new MatrixSelectionView(matrix, [1, 2], [0, 1]);\n      a = matrix.get(0, 0);\n      b = matrix.get(0, 1);\n      c = matrix.get(0, 2);\n\n      return (\n        a * determinant(subMatrix0) -\n        b * determinant(subMatrix1) +\n        c * determinant(subMatrix2)\n      );\n    } else {\n      // general purpose determinant using the LU decomposition\n      return new LuDecomposition(matrix).determinant;\n    }\n  } else {\n    throw Error('determinant can only be calculated for a square matrix');\n  }\n}\n", "import SingularValueDecomposition from './dc/svd';\nimport Matrix from './matrix';\n\nfunction xrange(n, exception) {\n  let range = [];\n  for (let i = 0; i < n; i++) {\n    if (i !== exception) {\n      range.push(i);\n    }\n  }\n  return range;\n}\n\nfunction dependenciesOneRow(\n  error,\n  matrix,\n  index,\n  thresholdValue = 10e-10,\n  thresholdError = 10e-10,\n) {\n  if (error > thresholdError) {\n    return new Array(matrix.rows + 1).fill(0);\n  } else {\n    let returnArray = matrix.addRow(index, [0]);\n    for (let i = 0; i < returnArray.rows; i++) {\n      if (Math.abs(returnArray.get(i, 0)) < thresholdValue) {\n        returnArray.set(i, 0, 0);\n      }\n    }\n    return returnArray.to1DArray();\n  }\n}\n\nexport function linearDependencies(matrix, options = {}) {\n  const { thresholdValue = 10e-10, thresholdError = 10e-10 } = options;\n  matrix = Matrix.checkMatrix(matrix);\n\n  let n = matrix.rows;\n  let results = new Matrix(n, n);\n\n  for (let i = 0; i < n; i++) {\n    let b = Matrix.columnVector(matrix.getRow(i));\n    let Abis = matrix.subMatrixRow(xrange(n, i)).transpose();\n    let svd = new SingularValueDecomposition(Abis);\n    let x = svd.solve(b);\n    let error = Matrix.sub(b, Abis.mmul(x)).abs().max();\n    results.setRow(\n      i,\n      dependenciesOneRow(error, x, i, thresholdValue, thresholdError),\n    );\n  }\n  return results;\n}\n", "import SVD from './dc/svd';\nimport Matrix from './matrix';\n\nexport function pseudoInverse(matrix, threshold = Number.EPSILON) {\n  matrix = Matrix.checkMatrix(matrix);\n  if (matrix.isEmpty()) {\n    // with a zero dimension, the pseudo-inverse is the transpose, since all 0xn and nx0 matrices are singular\n    // (0xn)*(nx0)*(0xn) = 0xn\n    // (nx0)*(0xn)*(nx0) = nx0\n    return matrix.transpose();\n  }\n  let svdSolution = new SVD(matrix, { autoTranspose: true });\n\n  let U = svdSolution.leftSingularVectors;\n  let V = svdSolution.rightSingularVectors;\n  let s = svdSolution.diagonal;\n\n  for (let i = 0; i < s.length; i++) {\n    if (Math.abs(s[i]) > threshold) {\n      s[i] = 1.0 / s[i];\n    } else {\n      s[i] = 0.0;\n    }\n  }\n\n  return V.mmul(Matrix.diag(s).mmul(U.transpose()));\n}\n", "import { isAnyArray } from 'is-any-array';\n\nimport Matrix from './matrix';\n\nexport function covariance(xMatrix, yMatrix = xMatrix, options = {}) {\n  xMatrix = new Matrix(xMatrix);\n  let yIsSame = false;\n  if (\n    typeof yMatrix === 'object' &&\n    !Matrix.isMatrix(yMatrix) &&\n    !isAnyArray(yMatrix)\n  ) {\n    options = yMatrix;\n    yMatrix = xMatrix;\n    yIsSame = true;\n  } else {\n    yMatrix = new Matrix(yMatrix);\n  }\n  if (xMatrix.rows !== yMatrix.rows) {\n    throw new TypeError('Both matrices must have the same number of rows');\n  }\n  const { center = true } = options;\n  if (center) {\n    xMatrix = xMatrix.center('column');\n    if (!yIsSame) {\n      yMatrix = yMatrix.center('column');\n    }\n  }\n  const cov = xMatrix.transpose().mmul(yMatrix);\n  for (let i = 0; i < cov.rows; i++) {\n    for (let j = 0; j < cov.columns; j++) {\n      cov.set(i, j, cov.get(i, j) * (1 / (xMatrix.rows - 1)));\n    }\n  }\n  return cov;\n}\n", "import { isAnyArray } from 'is-any-array';\n\nimport Matrix from './matrix';\n\nexport function correlation(xMatrix, yMatrix = xMatrix, options = {}) {\n  xMatrix = new Matrix(xMatrix);\n  let yIsSame = false;\n  if (\n    typeof yMatrix === 'object' &&\n    !Matrix.isMatrix(yMatrix) &&\n    !isAnyArray(yMatrix)\n  ) {\n    options = yMatrix;\n    yMatrix = xMatrix;\n    yIsSame = true;\n  } else {\n    yMatrix = new Matrix(yMatrix);\n  }\n  if (xMatrix.rows !== yMatrix.rows) {\n    throw new TypeError('Both matrices must have the same number of rows');\n  }\n\n  const { center = true, scale = true } = options;\n  if (center) {\n    xMatrix.center('column');\n    if (!yIsSame) {\n      yMatrix.center('column');\n    }\n  }\n  if (scale) {\n    xMatrix.scale('column');\n    if (!yIsSame) {\n      yMatrix.scale('column');\n    }\n  }\n\n  const sdx = xMatrix.standardDeviation('column', { unbiased: true });\n  const sdy = yIsSame\n    ? sdx\n    : yMatrix.standardDeviation('column', { unbiased: true });\n\n  const corr = xMatrix.transpose().mmul(yMatrix);\n  for (let i = 0; i < corr.rows; i++) {\n    for (let j = 0; j < corr.columns; j++) {\n      corr.set(\n        i,\n        j,\n        corr.get(i, j) * (1 / (sdx[i] * sdy[j])) * (1 / (xMatrix.rows - 1)),\n      );\n    }\n  }\n  return corr;\n}\n", "import Matrix from '../matrix';\nimport WrapperMatrix2D from '../wrap/WrapperMatrix2D';\n\nimport { hypotenuse } from './util';\n\nexport default class EigenvalueDecomposition {\n  constructor(matrix, options = {}) {\n    const { assumeSymmetric = false } = options;\n\n    matrix = WrapperMatrix2D.checkMatrix(matrix);\n    if (!matrix.isSquare()) {\n      throw new Error('Matrix is not a square matrix');\n    }\n\n    if (matrix.isEmpty()) {\n      throw new Error('Matrix must be non-empty');\n    }\n\n    let n = matrix.columns;\n    let V = new Matrix(n, n);\n    let d = new Float64Array(n);\n    let e = new Float64Array(n);\n    let value = matrix;\n    let i, j;\n\n    let isSymmetric = false;\n    if (assumeSymmetric) {\n      isSymmetric = true;\n    } else {\n      isSymmetric = matrix.isSymmetric();\n    }\n\n    if (isSymmetric) {\n      for (i = 0; i < n; i++) {\n        for (j = 0; j < n; j++) {\n          V.set(i, j, value.get(i, j));\n        }\n      }\n      tred2(n, e, d, V);\n      tql2(n, e, d, V);\n    } else {\n      let H = new Matrix(n, n);\n      let ort = new Float64Array(n);\n      for (j = 0; j < n; j++) {\n        for (i = 0; i < n; i++) {\n          H.set(i, j, value.get(i, j));\n        }\n      }\n      orthes(n, H, ort, V);\n      hqr2(n, e, d, V, H);\n    }\n\n    this.n = n;\n    this.e = e;\n    this.d = d;\n    this.V = V;\n  }\n\n  get realEigenvalues() {\n    return Array.from(this.d);\n  }\n\n  get imaginaryEigenvalues() {\n    return Array.from(this.e);\n  }\n\n  get eigenvectorMatrix() {\n    return this.V;\n  }\n\n  get diagonalMatrix() {\n    let n = this.n;\n    let e = this.e;\n    let d = this.d;\n    let X = new Matrix(n, n);\n    let i, j;\n    for (i = 0; i < n; i++) {\n      for (j = 0; j < n; j++) {\n        X.set(i, j, 0);\n      }\n      X.set(i, i, d[i]);\n      if (e[i] > 0) {\n        X.set(i, i + 1, e[i]);\n      } else if (e[i] < 0) {\n        X.set(i, i - 1, e[i]);\n      }\n    }\n    return X;\n  }\n}\n\nfunction tred2(n, e, d, V) {\n  let f, g, h, i, j, k, hh, scale;\n\n  for (j = 0; j < n; j++) {\n    d[j] = V.get(n - 1, j);\n  }\n\n  for (i = n - 1; i > 0; i--) {\n    scale = 0;\n    h = 0;\n    for (k = 0; k < i; k++) {\n      scale = scale + Math.abs(d[k]);\n    }\n\n    if (scale === 0) {\n      e[i] = d[i - 1];\n      for (j = 0; j < i; j++) {\n        d[j] = V.get(i - 1, j);\n        V.set(i, j, 0);\n        V.set(j, i, 0);\n      }\n    } else {\n      for (k = 0; k < i; k++) {\n        d[k] /= scale;\n        h += d[k] * d[k];\n      }\n\n      f = d[i - 1];\n      g = Math.sqrt(h);\n      if (f > 0) {\n        g = -g;\n      }\n\n      e[i] = scale * g;\n      h = h - f * g;\n      d[i - 1] = f - g;\n      for (j = 0; j < i; j++) {\n        e[j] = 0;\n      }\n\n      for (j = 0; j < i; j++) {\n        f = d[j];\n        V.set(j, i, f);\n        g = e[j] + V.get(j, j) * f;\n        for (k = j + 1; k <= i - 1; k++) {\n          g += V.get(k, j) * d[k];\n          e[k] += V.get(k, j) * f;\n        }\n        e[j] = g;\n      }\n\n      f = 0;\n      for (j = 0; j < i; j++) {\n        e[j] /= h;\n        f += e[j] * d[j];\n      }\n\n      hh = f / (h + h);\n      for (j = 0; j < i; j++) {\n        e[j] -= hh * d[j];\n      }\n\n      for (j = 0; j < i; j++) {\n        f = d[j];\n        g = e[j];\n        for (k = j; k <= i - 1; k++) {\n          V.set(k, j, V.get(k, j) - (f * e[k] + g * d[k]));\n        }\n        d[j] = V.get(i - 1, j);\n        V.set(i, j, 0);\n      }\n    }\n    d[i] = h;\n  }\n\n  for (i = 0; i < n - 1; i++) {\n    V.set(n - 1, i, V.get(i, i));\n    V.set(i, i, 1);\n    h = d[i + 1];\n    if (h !== 0) {\n      for (k = 0; k <= i; k++) {\n        d[k] = V.get(k, i + 1) / h;\n      }\n\n      for (j = 0; j <= i; j++) {\n        g = 0;\n        for (k = 0; k <= i; k++) {\n          g += V.get(k, i + 1) * V.get(k, j);\n        }\n        for (k = 0; k <= i; k++) {\n          V.set(k, j, V.get(k, j) - g * d[k]);\n        }\n      }\n    }\n\n    for (k = 0; k <= i; k++) {\n      V.set(k, i + 1, 0);\n    }\n  }\n\n  for (j = 0; j < n; j++) {\n    d[j] = V.get(n - 1, j);\n    V.set(n - 1, j, 0);\n  }\n\n  V.set(n - 1, n - 1, 1);\n  e[0] = 0;\n}\n\nfunction tql2(n, e, d, V) {\n  let g, h, i, j, k, l, m, p, r, dl1, c, c2, c3, el1, s, s2, iter;\n\n  for (i = 1; i < n; i++) {\n    e[i - 1] = e[i];\n  }\n\n  e[n - 1] = 0;\n\n  let f = 0;\n  let tst1 = 0;\n  let eps = Number.EPSILON;\n\n  for (l = 0; l < n; l++) {\n    tst1 = Math.max(tst1, Math.abs(d[l]) + Math.abs(e[l]));\n    m = l;\n    while (m < n) {\n      if (Math.abs(e[m]) <= eps * tst1) {\n        break;\n      }\n      m++;\n    }\n\n    if (m > l) {\n      iter = 0;\n      do {\n        iter = iter + 1;\n\n        g = d[l];\n        p = (d[l + 1] - g) / (2 * e[l]);\n        r = hypotenuse(p, 1);\n        if (p < 0) {\n          r = -r;\n        }\n\n        d[l] = e[l] / (p + r);\n        d[l + 1] = e[l] * (p + r);\n        dl1 = d[l + 1];\n        h = g - d[l];\n        for (i = l + 2; i < n; i++) {\n          d[i] -= h;\n        }\n\n        f = f + h;\n\n        p = d[m];\n        c = 1;\n        c2 = c;\n        c3 = c;\n        el1 = e[l + 1];\n        s = 0;\n        s2 = 0;\n        for (i = m - 1; i >= l; i--) {\n          c3 = c2;\n          c2 = c;\n          s2 = s;\n          g = c * e[i];\n          h = c * p;\n          r = hypotenuse(p, e[i]);\n          e[i + 1] = s * r;\n          s = e[i] / r;\n          c = p / r;\n          p = c * d[i] - s * g;\n          d[i + 1] = h + s * (c * g + s * d[i]);\n\n          for (k = 0; k < n; k++) {\n            h = V.get(k, i + 1);\n            V.set(k, i + 1, s * V.get(k, i) + c * h);\n            V.set(k, i, c * V.get(k, i) - s * h);\n          }\n        }\n\n        p = (-s * s2 * c3 * el1 * e[l]) / dl1;\n        e[l] = s * p;\n        d[l] = c * p;\n      } while (Math.abs(e[l]) > eps * tst1);\n    }\n    d[l] = d[l] + f;\n    e[l] = 0;\n  }\n\n  for (i = 0; i < n - 1; i++) {\n    k = i;\n    p = d[i];\n    for (j = i + 1; j < n; j++) {\n      if (d[j] < p) {\n        k = j;\n        p = d[j];\n      }\n    }\n\n    if (k !== i) {\n      d[k] = d[i];\n      d[i] = p;\n      for (j = 0; j < n; j++) {\n        p = V.get(j, i);\n        V.set(j, i, V.get(j, k));\n        V.set(j, k, p);\n      }\n    }\n  }\n}\n\nfunction orthes(n, H, ort, V) {\n  let low = 0;\n  let high = n - 1;\n  let f, g, h, i, j, m;\n  let scale;\n\n  for (m = low + 1; m <= high - 1; m++) {\n    scale = 0;\n    for (i = m; i <= high; i++) {\n      scale = scale + Math.abs(H.get(i, m - 1));\n    }\n\n    if (scale !== 0) {\n      h = 0;\n      for (i = high; i >= m; i--) {\n        ort[i] = H.get(i, m - 1) / scale;\n        h += ort[i] * ort[i];\n      }\n\n      g = Math.sqrt(h);\n      if (ort[m] > 0) {\n        g = -g;\n      }\n\n      h = h - ort[m] * g;\n      ort[m] = ort[m] - g;\n\n      for (j = m; j < n; j++) {\n        f = 0;\n        for (i = high; i >= m; i--) {\n          f += ort[i] * H.get(i, j);\n        }\n\n        f = f / h;\n        for (i = m; i <= high; i++) {\n          H.set(i, j, H.get(i, j) - f * ort[i]);\n        }\n      }\n\n      for (i = 0; i <= high; i++) {\n        f = 0;\n        for (j = high; j >= m; j--) {\n          f += ort[j] * H.get(i, j);\n        }\n\n        f = f / h;\n        for (j = m; j <= high; j++) {\n          H.set(i, j, H.get(i, j) - f * ort[j]);\n        }\n      }\n\n      ort[m] = scale * ort[m];\n      H.set(m, m - 1, scale * g);\n    }\n  }\n\n  for (i = 0; i < n; i++) {\n    for (j = 0; j < n; j++) {\n      V.set(i, j, i === j ? 1 : 0);\n    }\n  }\n\n  for (m = high - 1; m >= low + 1; m--) {\n    if (H.get(m, m - 1) !== 0) {\n      for (i = m + 1; i <= high; i++) {\n        ort[i] = H.get(i, m - 1);\n      }\n\n      for (j = m; j <= high; j++) {\n        g = 0;\n        for (i = m; i <= high; i++) {\n          g += ort[i] * V.get(i, j);\n        }\n\n        g = g / ort[m] / H.get(m, m - 1);\n        for (i = m; i <= high; i++) {\n          V.set(i, j, V.get(i, j) + g * ort[i]);\n        }\n      }\n    }\n  }\n}\n\nfunction hqr2(nn, e, d, V, H) {\n  let n = nn - 1;\n  let low = 0;\n  let high = nn - 1;\n  let eps = Number.EPSILON;\n  let exshift = 0;\n  let norm = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let z = 0;\n  let iter = 0;\n  let i, j, k, l, m, t, w, x, y;\n  let ra, sa, vr, vi;\n  let notlast, cdivres;\n\n  for (i = 0; i < nn; i++) {\n    if (i < low || i > high) {\n      d[i] = H.get(i, i);\n      e[i] = 0;\n    }\n\n    for (j = Math.max(i - 1, 0); j < nn; j++) {\n      norm = norm + Math.abs(H.get(i, j));\n    }\n  }\n\n  while (n >= low) {\n    l = n;\n    while (l > low) {\n      s = Math.abs(H.get(l - 1, l - 1)) + Math.abs(H.get(l, l));\n      if (s === 0) {\n        s = norm;\n      }\n      if (Math.abs(H.get(l, l - 1)) < eps * s) {\n        break;\n      }\n      l--;\n    }\n\n    if (l === n) {\n      H.set(n, n, H.get(n, n) + exshift);\n      d[n] = H.get(n, n);\n      e[n] = 0;\n      n--;\n      iter = 0;\n    } else if (l === n - 1) {\n      w = H.get(n, n - 1) * H.get(n - 1, n);\n      p = (H.get(n - 1, n - 1) - H.get(n, n)) / 2;\n      q = p * p + w;\n      z = Math.sqrt(Math.abs(q));\n      H.set(n, n, H.get(n, n) + exshift);\n      H.set(n - 1, n - 1, H.get(n - 1, n - 1) + exshift);\n      x = H.get(n, n);\n\n      if (q >= 0) {\n        z = p >= 0 ? p + z : p - z;\n        d[n - 1] = x + z;\n        d[n] = d[n - 1];\n        if (z !== 0) {\n          d[n] = x - w / z;\n        }\n        e[n - 1] = 0;\n        e[n] = 0;\n        x = H.get(n, n - 1);\n        s = Math.abs(x) + Math.abs(z);\n        p = x / s;\n        q = z / s;\n        r = Math.sqrt(p * p + q * q);\n        p = p / r;\n        q = q / r;\n\n        for (j = n - 1; j < nn; j++) {\n          z = H.get(n - 1, j);\n          H.set(n - 1, j, q * z + p * H.get(n, j));\n          H.set(n, j, q * H.get(n, j) - p * z);\n        }\n\n        for (i = 0; i <= n; i++) {\n          z = H.get(i, n - 1);\n          H.set(i, n - 1, q * z + p * H.get(i, n));\n          H.set(i, n, q * H.get(i, n) - p * z);\n        }\n\n        for (i = low; i <= high; i++) {\n          z = V.get(i, n - 1);\n          V.set(i, n - 1, q * z + p * V.get(i, n));\n          V.set(i, n, q * V.get(i, n) - p * z);\n        }\n      } else {\n        d[n - 1] = x + p;\n        d[n] = x + p;\n        e[n - 1] = z;\n        e[n] = -z;\n      }\n\n      n = n - 2;\n      iter = 0;\n    } else {\n      x = H.get(n, n);\n      y = 0;\n      w = 0;\n      if (l < n) {\n        y = H.get(n - 1, n - 1);\n        w = H.get(n, n - 1) * H.get(n - 1, n);\n      }\n\n      if (iter === 10) {\n        exshift += x;\n        for (i = low; i <= n; i++) {\n          H.set(i, i, H.get(i, i) - x);\n        }\n        s = Math.abs(H.get(n, n - 1)) + Math.abs(H.get(n - 1, n - 2));\n        x = y = 0.75 * s;\n        w = -0.4375 * s * s;\n      }\n\n      if (iter === 30) {\n        s = (y - x) / 2;\n        s = s * s + w;\n        if (s > 0) {\n          s = Math.sqrt(s);\n          if (y < x) {\n            s = -s;\n          }\n          s = x - w / ((y - x) / 2 + s);\n          for (i = low; i <= n; i++) {\n            H.set(i, i, H.get(i, i) - s);\n          }\n          exshift += s;\n          x = y = w = 0.964;\n        }\n      }\n\n      iter = iter + 1;\n\n      m = n - 2;\n      while (m >= l) {\n        z = H.get(m, m);\n        r = x - z;\n        s = y - z;\n        p = (r * s - w) / H.get(m + 1, m) + H.get(m, m + 1);\n        q = H.get(m + 1, m + 1) - z - r - s;\n        r = H.get(m + 2, m + 1);\n        s = Math.abs(p) + Math.abs(q) + Math.abs(r);\n        p = p / s;\n        q = q / s;\n        r = r / s;\n        if (m === l) {\n          break;\n        }\n        if (\n          Math.abs(H.get(m, m - 1)) * (Math.abs(q) + Math.abs(r)) <\n          eps *\n            (Math.abs(p) *\n              (Math.abs(H.get(m - 1, m - 1)) +\n                Math.abs(z) +\n                Math.abs(H.get(m + 1, m + 1))))\n        ) {\n          break;\n        }\n        m--;\n      }\n\n      for (i = m + 2; i <= n; i++) {\n        H.set(i, i - 2, 0);\n        if (i > m + 2) {\n          H.set(i, i - 3, 0);\n        }\n      }\n\n      for (k = m; k <= n - 1; k++) {\n        notlast = k !== n - 1;\n        if (k !== m) {\n          p = H.get(k, k - 1);\n          q = H.get(k + 1, k - 1);\n          r = notlast ? H.get(k + 2, k - 1) : 0;\n          x = Math.abs(p) + Math.abs(q) + Math.abs(r);\n          if (x !== 0) {\n            p = p / x;\n            q = q / x;\n            r = r / x;\n          }\n        }\n\n        if (x === 0) {\n          break;\n        }\n\n        s = Math.sqrt(p * p + q * q + r * r);\n        if (p < 0) {\n          s = -s;\n        }\n\n        if (s !== 0) {\n          if (k !== m) {\n            H.set(k, k - 1, -s * x);\n          } else if (l !== m) {\n            H.set(k, k - 1, -H.get(k, k - 1));\n          }\n\n          p = p + s;\n          x = p / s;\n          y = q / s;\n          z = r / s;\n          q = q / p;\n          r = r / p;\n\n          for (j = k; j < nn; j++) {\n            p = H.get(k, j) + q * H.get(k + 1, j);\n            if (notlast) {\n              p = p + r * H.get(k + 2, j);\n              H.set(k + 2, j, H.get(k + 2, j) - p * z);\n            }\n\n            H.set(k, j, H.get(k, j) - p * x);\n            H.set(k + 1, j, H.get(k + 1, j) - p * y);\n          }\n\n          for (i = 0; i <= Math.min(n, k + 3); i++) {\n            p = x * H.get(i, k) + y * H.get(i, k + 1);\n            if (notlast) {\n              p = p + z * H.get(i, k + 2);\n              H.set(i, k + 2, H.get(i, k + 2) - p * r);\n            }\n\n            H.set(i, k, H.get(i, k) - p);\n            H.set(i, k + 1, H.get(i, k + 1) - p * q);\n          }\n\n          for (i = low; i <= high; i++) {\n            p = x * V.get(i, k) + y * V.get(i, k + 1);\n            if (notlast) {\n              p = p + z * V.get(i, k + 2);\n              V.set(i, k + 2, V.get(i, k + 2) - p * r);\n            }\n\n            V.set(i, k, V.get(i, k) - p);\n            V.set(i, k + 1, V.get(i, k + 1) - p * q);\n          }\n        }\n      }\n    }\n  }\n\n  if (norm === 0) {\n    return;\n  }\n\n  for (n = nn - 1; n >= 0; n--) {\n    p = d[n];\n    q = e[n];\n\n    if (q === 0) {\n      l = n;\n      H.set(n, n, 1);\n      for (i = n - 1; i >= 0; i--) {\n        w = H.get(i, i) - p;\n        r = 0;\n        for (j = l; j <= n; j++) {\n          r = r + H.get(i, j) * H.get(j, n);\n        }\n\n        if (e[i] < 0) {\n          z = w;\n          s = r;\n        } else {\n          l = i;\n          if (e[i] === 0) {\n            H.set(i, n, w !== 0 ? -r / w : -r / (eps * norm));\n          } else {\n            x = H.get(i, i + 1);\n            y = H.get(i + 1, i);\n            q = (d[i] - p) * (d[i] - p) + e[i] * e[i];\n            t = (x * s - z * r) / q;\n            H.set(i, n, t);\n            H.set(\n              i + 1,\n              n,\n              Math.abs(x) > Math.abs(z) ? (-r - w * t) / x : (-s - y * t) / z,\n            );\n          }\n\n          t = Math.abs(H.get(i, n));\n          if (eps * t * t > 1) {\n            for (j = i; j <= n; j++) {\n              H.set(j, n, H.get(j, n) / t);\n            }\n          }\n        }\n      }\n    } else if (q < 0) {\n      l = n - 1;\n\n      if (Math.abs(H.get(n, n - 1)) > Math.abs(H.get(n - 1, n))) {\n        H.set(n - 1, n - 1, q / H.get(n, n - 1));\n        H.set(n - 1, n, -(H.get(n, n) - p) / H.get(n, n - 1));\n      } else {\n        cdivres = cdiv(0, -H.get(n - 1, n), H.get(n - 1, n - 1) - p, q);\n        H.set(n - 1, n - 1, cdivres[0]);\n        H.set(n - 1, n, cdivres[1]);\n      }\n\n      H.set(n, n - 1, 0);\n      H.set(n, n, 1);\n      for (i = n - 2; i >= 0; i--) {\n        ra = 0;\n        sa = 0;\n        for (j = l; j <= n; j++) {\n          ra = ra + H.get(i, j) * H.get(j, n - 1);\n          sa = sa + H.get(i, j) * H.get(j, n);\n        }\n\n        w = H.get(i, i) - p;\n\n        if (e[i] < 0) {\n          z = w;\n          r = ra;\n          s = sa;\n        } else {\n          l = i;\n          if (e[i] === 0) {\n            cdivres = cdiv(-ra, -sa, w, q);\n            H.set(i, n - 1, cdivres[0]);\n            H.set(i, n, cdivres[1]);\n          } else {\n            x = H.get(i, i + 1);\n            y = H.get(i + 1, i);\n            vr = (d[i] - p) * (d[i] - p) + e[i] * e[i] - q * q;\n            vi = (d[i] - p) * 2 * q;\n            if (vr === 0 && vi === 0) {\n              vr =\n                eps *\n                norm *\n                (Math.abs(w) +\n                  Math.abs(q) +\n                  Math.abs(x) +\n                  Math.abs(y) +\n                  Math.abs(z));\n            }\n            cdivres = cdiv(\n              x * r - z * ra + q * sa,\n              x * s - z * sa - q * ra,\n              vr,\n              vi,\n            );\n            H.set(i, n - 1, cdivres[0]);\n            H.set(i, n, cdivres[1]);\n            if (Math.abs(x) > Math.abs(z) + Math.abs(q)) {\n              H.set(\n                i + 1,\n                n - 1,\n                (-ra - w * H.get(i, n - 1) + q * H.get(i, n)) / x,\n              );\n              H.set(\n                i + 1,\n                n,\n                (-sa - w * H.get(i, n) - q * H.get(i, n - 1)) / x,\n              );\n            } else {\n              cdivres = cdiv(\n                -r - y * H.get(i, n - 1),\n                -s - y * H.get(i, n),\n                z,\n                q,\n              );\n              H.set(i + 1, n - 1, cdivres[0]);\n              H.set(i + 1, n, cdivres[1]);\n            }\n          }\n\n          t = Math.max(Math.abs(H.get(i, n - 1)), Math.abs(H.get(i, n)));\n          if (eps * t * t > 1) {\n            for (j = i; j <= n; j++) {\n              H.set(j, n - 1, H.get(j, n - 1) / t);\n              H.set(j, n, H.get(j, n) / t);\n            }\n          }\n        }\n      }\n    }\n  }\n\n  for (i = 0; i < nn; i++) {\n    if (i < low || i > high) {\n      for (j = i; j < nn; j++) {\n        V.set(i, j, H.get(i, j));\n      }\n    }\n  }\n\n  for (j = nn - 1; j >= low; j--) {\n    for (i = low; i <= high; i++) {\n      z = 0;\n      for (k = low; k <= Math.min(j, high); k++) {\n        z = z + V.get(i, k) * H.get(k, j);\n      }\n      V.set(i, j, z);\n    }\n  }\n}\n\nfunction cdiv(xr, xi, yr, yi) {\n  let r, d;\n  if (Math.abs(yr) > Math.abs(yi)) {\n    r = yi / yr;\n    d = yr + r * yi;\n    return [(xr + r * xi) / d, (xi - r * xr) / d];\n  } else {\n    r = yr / yi;\n    d = yi + r * yr;\n    return [(r * xr + xi) / d, (r * xi - xr) / d];\n  }\n}\n", "import Matrix from '../matrix';\nimport WrapperMatrix2D from '../wrap/WrapperMatrix2D';\n\nexport default class CholeskyDecomposition {\n  constructor(value) {\n    value = WrapperMatrix2D.checkMatrix(value);\n    if (!value.isSymmetric()) {\n      throw new Error('Matrix is not symmetric');\n    }\n\n    let a = value;\n    let dimension = a.rows;\n    let l = new Matrix(dimension, dimension);\n    let positiveDefinite = true;\n    let i, j, k;\n\n    for (j = 0; j < dimension; j++) {\n      let d = 0;\n      for (k = 0; k < j; k++) {\n        let s = 0;\n        for (i = 0; i < k; i++) {\n          s += l.get(k, i) * l.get(j, i);\n        }\n        s = (a.get(j, k) - s) / l.get(k, k);\n        l.set(j, k, s);\n        d = d + s * s;\n      }\n\n      d = a.get(j, j) - d;\n\n      positiveDefinite &= d > 0;\n      l.set(j, j, Math.sqrt(Math.max(d, 0)));\n      for (k = j + 1; k < dimension; k++) {\n        l.set(j, k, 0);\n      }\n    }\n\n    this.L = l;\n    this.positiveDefinite = Boolean(positiveDefinite);\n  }\n\n  isPositiveDefinite() {\n    return this.positiveDefinite;\n  }\n\n  solve(value) {\n    value = WrapperMatrix2D.checkMatrix(value);\n\n    let l = this.L;\n    let dimension = l.rows;\n\n    if (value.rows !== dimension) {\n      throw new Error('Matrix dimensions do not match');\n    }\n    if (this.isPositiveDefinite() === false) {\n      throw new Error('Matrix is not positive definite');\n    }\n\n    let count = value.columns;\n    let B = value.clone();\n    let i, j, k;\n\n    for (k = 0; k < dimension; k++) {\n      for (j = 0; j < count; j++) {\n        for (i = 0; i < k; i++) {\n          B.set(k, j, B.get(k, j) - B.get(i, j) * l.get(k, i));\n        }\n        B.set(k, j, B.get(k, j) / l.get(k, k));\n      }\n    }\n\n    for (k = dimension - 1; k >= 0; k--) {\n      for (j = 0; j < count; j++) {\n        for (i = k + 1; i < dimension; i++) {\n          B.set(k, j, B.get(k, j) - B.get(i, j) * l.get(i, k));\n        }\n        B.set(k, j, B.get(k, j) / l.get(k, k));\n      }\n    }\n\n    return B;\n  }\n\n  get lowerTriangularMatrix() {\n    return this.L;\n  }\n}\n", "import { isAnyArray } from 'is-any-array';\n\nimport Matrix from '../matrix';\nimport WrapperMatrix2D from '../wrap/WrapperMatrix2D';\n\nexport default class nipals {\n  constructor(X, options = {}) {\n    X = WrapperMatrix2D.checkMatrix(X);\n    let { Y } = options;\n    const {\n      scaleScores = false,\n      maxIterations = 1000,\n      terminationCriteria = 1e-10,\n    } = options;\n\n    let u;\n    if (Y) {\n      if (isAnyArray(Y) && typeof Y[0] === 'number') {\n        Y = Matrix.columnVector(Y);\n      } else {\n        Y = WrapperMatrix2D.checkMatrix(Y);\n      }\n      if (Y.rows !== X.rows) {\n        throw new Error('Y should have the same number of rows as X');\n      }\n      u = Y.getColumnVector(0);\n    } else {\n      u = X.getColumnVector(0);\n    }\n\n    let diff = 1;\n    let t, q, w, tOld;\n\n    for (\n      let counter = 0;\n      counter < maxIterations && diff > terminationCriteria;\n      counter++\n    ) {\n      w = X.transpose().mmul(u).div(u.transpose().mmul(u).get(0, 0));\n      w = w.div(w.norm());\n\n      t = X.mmul(w).div(w.transpose().mmul(w).get(0, 0));\n\n      if (counter > 0) {\n        diff = t.clone().sub(tOld).pow(2).sum();\n      }\n      tOld = t.clone();\n\n      if (Y) {\n        q = Y.transpose().mmul(t).div(t.transpose().mmul(t).get(0, 0));\n        q = q.div(q.norm());\n\n        u = Y.mmul(q).div(q.transpose().mmul(q).get(0, 0));\n      } else {\n        u = t;\n      }\n    }\n\n    if (Y) {\n      let p = X.transpose().mmul(t).div(t.transpose().mmul(t).get(0, 0));\n      p = p.div(p.norm());\n      let xResidual = X.clone().sub(t.clone().mmul(p.transpose()));\n      let residual = u.transpose().mmul(t).div(t.transpose().mmul(t).get(0, 0));\n      let yResidual = Y.clone().sub(\n        t.clone().mulS(residual.get(0, 0)).mmul(q.transpose()),\n      );\n\n      this.t = t;\n      this.p = p.transpose();\n      this.w = w.transpose();\n      this.q = q;\n      this.u = u;\n      this.s = t.transpose().mmul(t);\n      this.xResidual = xResidual;\n      this.yResidual = yResidual;\n      this.betas = residual;\n    } else {\n      this.w = w.transpose();\n      this.s = t.transpose().mmul(t).sqrt();\n      if (scaleScores) {\n        this.t = t.clone().div(this.s.get(0, 0));\n      } else {\n        this.t = t;\n      }\n      this.xResidual = X.sub(t.mmul(w.transpose()));\n    }\n  }\n}\n"],
  "mappings": "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",
  "names": ["AbstractMatrix", "Matrix", "max", "min", "max", "r", "c", "determinant"]
}
